{"ast":null,"code":"var _jsxFileName = \"/Users/claudia.crisostomo/Documents/elvisp/lokalise-challenge/romaer-app-2/roamer-app/src/components/app/index.tsx\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport './styles.css';\nimport Menu from '../menu';\nimport Project from '../project';\nimport { fecthProjects } from '../../redux/fetch';\nimport { isExpanded, projects } from '../../redux/app/selectors';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst App = ({\n  projects,\n  fetchProjects\n}) => {\n  // useEffect(() => {\n  //   fetchProjects();\n  // }, []);\n  const isEmpty = projects.length > 0;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(Menu, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this), !isEmpty && projects.map(project => /*#__PURE__*/_jsxDEV(Project, {\n      project: project\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 44\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n};\n\n_c = App;\n\nconst mapStateToProps = state => ({\n  expand: isExpanded(state),\n  projects: projects(state)\n});\n\nconst mapDispatchToProps = dispatch => ({\n  fetchProjects: () => dispatch(fecthProjects())\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/claudia.crisostomo/Documents/elvisp/lokalise-challenge/romaer-app-2/roamer-app/src/components/app/index.tsx"],"names":["React","connect","Menu","Project","fecthProjects","isExpanded","projects","App","fetchProjects","isEmpty","length","map","project","mapStateToProps","state","expand","mapDispatchToProps","dispatch"],"mappings":";AAAA,OAAOA,KAAP,MAAqC,OAArC;AACA,SAASC,OAAT,QAAwB,aAAxB;AAEA,OAAO,cAAP;AACA,OAAOC,IAAP,MAAiB,SAAjB;AACA,OAAOC,OAAP,MAAoB,YAApB;AACA,SAASC,aAAT,QAA8B,mBAA9B;AAGA,SAASC,UAAT,EAAqBC,QAArB,QAAqC,2BAArC;;;AAiBA,MAAMC,GAAiB,GAAG,CAAC;AAAED,EAAAA,QAAF;AAAYE,EAAAA;AAAZ,CAAD,KAAiC;AACzD;AACA;AACA;AAEA,QAAMC,OAAO,GAAGH,QAAQ,CAACI,MAAT,GAAkB,CAAlC;AAEA,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,4BACE,QAAC,IAAD;AAAA;AAAA;AAAA;AAAA,YADF,EAEG,CAACD,OAAD,IAAYH,QAAQ,CAACK,GAAT,CAAaC,OAAO,iBAAI,QAAC,OAAD;AAAS,MAAA,OAAO,EAAEA;AAAlB;AAAA;AAAA;AAAA;AAAA,YAAxB,CAFf;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAMD,CAbD;;KAAML,G;;AAeN,MAAMM,eAAe,GAAIC,KAAD,KAAsC;AAC5DC,EAAAA,MAAM,EAAEV,UAAU,CAACS,KAAD,CAD0C;AAE5DR,EAAAA,QAAQ,EAAEA,QAAQ,CAACQ,KAAD;AAF0C,CAAtC,CAAxB;;AAKA,MAAME,kBAAkB,GACtBC,QADyB,KAEH;AACtBT,EAAAA,aAAa,EAAE,MAAMS,QAAQ,CAACb,aAAa,EAAd;AADP,CAFG,CAA3B;;AAMA,eAAeH,OAAO,CACpBY,eADoB,EAEpBG,kBAFoB,CAAP,CAGbT,GAHa,CAAf","sourcesContent":["import React, { FC, useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { ProjectProperties } from '../../redux/appState';\r\nimport './styles.css';\r\nimport Menu from '../menu';\r\nimport Project from '../project';\r\nimport { fecthProjects } from '../../redux/fetch';\r\nimport { AppDispatch } from '../../redux/store';\r\nimport { RootState } from '../../redux/reducers';\r\nimport { isExpanded, projects } from '../../redux/app/selectors';\r\n\r\nexport interface AppOwnProps {\r\n\r\n}\r\n\r\nexport interface AppStateProps {\r\n  expand: boolean;\r\n  projects: ProjectProperties[];\r\n}\r\n\r\nexport interface AppDispatchProps {\r\n  fetchProjects: () => void;\r\n}\r\n\r\nexport type AppProps = AppOwnProps & AppStateProps & AppDispatchProps;\r\n\r\nconst App: FC<AppProps> = ({ projects, fetchProjects }) => {\r\n  // useEffect(() => {\r\n  //   fetchProjects();\r\n  // }, []);\r\n\r\n  const isEmpty = projects.length > 0;\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Menu />\r\n      {!isEmpty && projects.map(project => <Project project={project} />)}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state: RootState): AppStateProps => ({\r\n  expand: isExpanded(state),\r\n  projects: projects(state),\r\n});\r\n\r\nconst mapDispatchToProps = (\r\n  dispatch: AppDispatch\r\n): AppDispatchProps => ({\r\n  fetchProjects: () => dispatch(fecthProjects())\r\n});\r\n\r\nexport default connect<AppStateProps, AppDispatchProps>(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(App);"]},"metadata":{},"sourceType":"module"}