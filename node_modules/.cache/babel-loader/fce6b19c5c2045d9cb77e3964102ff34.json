{"ast":null,"code":"import { projectsLoadSuccess } from './app/actions';\nimport { addProject, getProjects, setProjects } from \"../storage\";\nimport { projectStub } from \"../stubs/project\";\nexport const cleanProjects = () => {\n  return dispatch => {\n    const empty = [];\n    debugger;\n    setProjects(empty);\n    dispatch(projectsLoadSuccess(empty));\n    return Promise.resolve();\n  };\n};\nexport const fecthProjects = () => {\n  return dispatch => {\n    addProject(projectStub);\n    const projects = getProjects();\n    dispatch(projectsLoadSuccess(projects));\n    return Promise.resolve();\n  };\n};\nexport const createProject = () => {\n  return dispatch => {\n    addProject(projectStub);\n    const projects = getProjects();\n    dispatch(projectsLoadSuccess(projects));\n    return Promise.resolve();\n  };\n};","map":{"version":3,"sources":["/Users/claudia.crisostomo/Documents/elvisp/lokalise-challenge/romaer-app-2/roamer-app/src/redux/fetch.ts"],"names":["projectsLoadSuccess","addProject","getProjects","setProjects","projectStub","cleanProjects","dispatch","empty","Promise","resolve","fecthProjects","projects","createProject"],"mappings":"AACA,SAASA,mBAAT,QAAoC,eAApC;AAEA,SAASC,UAAT,EAAqBC,WAArB,EAAkCC,WAAlC,QAAqD,YAArD;AACA,SAASC,WAAT,QAA4B,kBAA5B;AAGA,OAAO,MAAMC,aAAa,GAAG,MAAkD;AAC3E,SAAOC,QAAQ,IAAI;AACf,UAAMC,KAAK,GAAG,EAAd;AACA;AACAJ,IAAAA,WAAW,CAACI,KAAD,CAAX;AACAD,IAAAA,QAAQ,CAACN,mBAAmB,CAACO,KAAD,CAApB,CAAR;AACA,WAAOC,OAAO,CAACC,OAAR,EAAP;AACH,GAND;AAOH,CARM;AAUP,OAAO,MAAMC,aAAa,GAAG,MAAkD;AAC3E,SAAOJ,QAAQ,IAAI;AACfL,IAAAA,UAAU,CAACG,WAAD,CAAV;AACA,UAAMO,QAA6B,GAAGT,WAAW,EAAjD;AACAI,IAAAA,QAAQ,CAACN,mBAAmB,CAACW,QAAD,CAApB,CAAR;AACA,WAAOH,OAAO,CAACC,OAAR,EAAP;AACH,GALD;AAMH,CAPM;AASP,OAAO,MAAMG,aAAa,GAAG,MAAkD;AAC3E,SAAON,QAAQ,IAAI;AACfL,IAAAA,UAAU,CAACG,WAAD,CAAV;AACA,UAAMO,QAA6B,GAAGT,WAAW,EAAjD;AACAI,IAAAA,QAAQ,CAACN,mBAAmB,CAACW,QAAD,CAApB,CAAR;AACA,WAAOH,OAAO,CAACC,OAAR,EAAP;AACH,GALD;AAMH,CAPM","sourcesContent":["import { AppDispatch } from './store';\r\nimport { projectsLoadSuccess } from './app/actions';\r\nimport { ProjectProperties } from './appState';\r\nimport { addProject, getProjects, setProjects } from \"../storage\";\r\nimport { projectStub } from \"../stubs/project\";\r\n\r\n\r\nexport const cleanProjects = (): ((dispatch: AppDispatch) => Promise<void>) => {\r\n    return dispatch => {\r\n        const empty = [];\r\n        debugger;\r\n        setProjects(empty);\r\n        dispatch(projectsLoadSuccess(empty));\r\n        return Promise.resolve();\r\n    };\r\n};\r\n\r\nexport const fecthProjects = (): ((dispatch: AppDispatch) => Promise<void>) => {\r\n    return dispatch => {\r\n        addProject(projectStub);\r\n        const projects: ProjectProperties[] = getProjects();\r\n        dispatch(projectsLoadSuccess(projects));\r\n        return Promise.resolve();\r\n    };\r\n};\r\n\r\nexport const createProject = (): ((dispatch: AppDispatch) => Promise<void>) => {\r\n    return dispatch => {\r\n        addProject(projectStub);\r\n        const projects: ProjectProperties[] = getProjects();\r\n        dispatch(projectsLoadSuccess(projects));\r\n        return Promise.resolve();\r\n    };\r\n};"]},"metadata":{},"sourceType":"module"}