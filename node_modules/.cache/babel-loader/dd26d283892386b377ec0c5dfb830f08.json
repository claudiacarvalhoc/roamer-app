{"ast":null,"code":"import{projectsLoadSuccess}from'./app/actions';import{addProject,getProjects,resetStorage}from\"../storage\";import{projectStub}from\"../stubs/project\";export var fecthProjects=function fecthProjects(){return function(dispatch){resetStorage();addProject(projectStub);var projects=getProjects();dispatch(projectsLoadSuccess(projects));return Promise.resolve();};};export var createProject=function createProject(){return function(dispatch){addProject(projectStub);var projects=getProjects();dispatch(projectsLoadSuccess(projects));return Promise.resolve();};};","map":{"version":3,"sources":["/Users/claudia.crisostomo/Documents/elvisp/lokalise-challenge/romaer-app-2/roamer-app/src/redux/fetch.ts"],"names":["projectsLoadSuccess","addProject","getProjects","resetStorage","projectStub","fecthProjects","dispatch","projects","Promise","resolve","createProject"],"mappings":"AACA,OAASA,mBAAT,KAAoC,eAApC,CAEA,OAASC,UAAT,CAAqBC,WAArB,CAAkCC,YAAlC,KAAsD,YAAtD,CACA,OAASC,WAAT,KAA4B,kBAA5B,CAGA,MAAO,IAAMC,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,EAAkD,CAC3E,MAAO,UAAAC,QAAQ,CAAI,CACfH,YAAY,GACZF,UAAU,CAACG,WAAD,CAAV,CACA,GAAMG,CAAAA,QAA6B,CAAGL,WAAW,EAAjD,CACAI,QAAQ,CAACN,mBAAmB,CAACO,QAAD,CAApB,CAAR,CACA,MAAOC,CAAAA,OAAO,CAACC,OAAR,EAAP,CACH,CAND,CAOH,CARM,CAUP,MAAO,IAAMC,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,EAAkD,CAC3E,MAAO,UAAAJ,QAAQ,CAAI,CACfL,UAAU,CAACG,WAAD,CAAV,CACA,GAAMG,CAAAA,QAA6B,CAAGL,WAAW,EAAjD,CACAI,QAAQ,CAACN,mBAAmB,CAACO,QAAD,CAApB,CAAR,CACA,MAAOC,CAAAA,OAAO,CAACC,OAAR,EAAP,CACH,CALD,CAMH,CAPM","sourcesContent":["import { AppDispatch } from './store';\r\nimport { projectsLoadSuccess } from './app/actions';\r\nimport { ProjectProperties } from './appState';\r\nimport { addProject, getProjects, resetStorage } from \"../storage\";\r\nimport { projectStub } from \"../stubs/project\";\r\n\r\n\r\nexport const fecthProjects = (): ((dispatch: AppDispatch) => Promise<void>) => {\r\n    return dispatch => {\r\n        resetStorage();\r\n        addProject(projectStub);\r\n        const projects: ProjectProperties[] = getProjects();\r\n        dispatch(projectsLoadSuccess(projects));\r\n        return Promise.resolve();\r\n    };\r\n};\r\n\r\nexport const createProject = (): ((dispatch: AppDispatch) => Promise<void>) => {\r\n    return dispatch => {\r\n        addProject(projectStub);\r\n        const projects: ProjectProperties[] = getProjects();\r\n        dispatch(projectsLoadSuccess(projects));\r\n        return Promise.resolve();\r\n    };\r\n};"]},"metadata":{},"sourceType":"module"}