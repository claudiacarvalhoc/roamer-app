{"ast":null,"code":"import { addProjectAction, addLanguagesAction } from './app/actions';\nimport { newProjectInitialState } from './initialState';\n\n/**\r\n * This function can be used in the future to create a project on the api\r\n * Then, according with result of http request, the data can be\r\n * stored as sucessfully or failed.\r\n * In this context, there's no failer flow, therefore, this function\r\n * trigger the action addProjectAction to add a new project\r\n */\nexport const createProject = () => {\n  return dispatch => {\n    dispatch(addProjectAction(newProjectInitialState));\n    return Promise.resolve();\n  };\n};\n/**\r\n * This function can be used in the future to save the data on api\r\n * Then, according with result of http request, the data can be\r\n * stored as sucessfully or failed.\r\n * In this context, there's no failer flow, therefore, this function\r\n * trigger the action addLanguagesAction to add the languages to a\r\n * specific project id\r\n * @param projectId\r\n * @param languages\r\n */\n\nexport const addLanguages = (project, languages) => {\n  return dispatch => {\n    const translationSections = project.translationSections.slice();\n    let lastId = translationSections[translationSections.length - 1].id;\n    const newTranslations = languages.map(language => {\n      return {\n        id: ++lastId,\n        country: language.value,\n        language: language.label,\n        done: 0,\n        wordsToDo: 40000,\n        unverified: 0\n      };\n    });\n    translationSections.push(...newTranslations);\n    dispatch(addLanguagesAction(project.id, translationSections));\n    return Promise.resolve();\n  };\n};","map":{"version":3,"sources":["/Users/claudia.crisostomo/Documents/elvisp/lokalise-challenge/romaer-app-2/roamer-app/src/redux/fetch.ts"],"names":["addProjectAction","addLanguagesAction","newProjectInitialState","createProject","dispatch","Promise","resolve","addLanguages","project","languages","translationSections","slice","lastId","length","id","newTranslations","map","language","country","value","label","done","wordsToDo","unverified","push"],"mappings":"AACA,SAASA,gBAAT,EAA2BC,kBAA3B,QAAqD,eAArD;AACA,SAASC,sBAAT,QAAuC,gBAAvC;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,aAAa,GAAG,MAAkD;AAC3E,SAAOC,QAAQ,IAAI;AACfA,IAAAA,QAAQ,CAACJ,gBAAgB,CAACE,sBAAD,CAAjB,CAAR;AACA,WAAOG,OAAO,CAACC,OAAR,EAAP;AACH,GAHD;AAIH,CALM;AAOP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,YAAY,GAAG,CAACC,OAAD,EAAwBC,SAAxB,KAAmG;AAC3H,SAAOL,QAAQ,IAAI;AACf,UAAMM,mBAAmB,GAAGF,OAAO,CAACE,mBAAR,CAA4BC,KAA5B,EAA5B;AACA,QAAIC,MAAM,GAAGF,mBAAmB,CAACA,mBAAmB,CAACG,MAApB,GAA6B,CAA9B,CAAnB,CAAoDC,EAAjE;AACA,UAAMC,eAAmC,GAAGN,SAAS,CAACO,GAAV,CAAcC,QAAQ,IAAI;AAClE,aAAO;AACHH,QAAAA,EAAE,EAAE,EAAEF,MADH;AAEHM,QAAAA,OAAO,EAAED,QAAQ,CAACE,KAFf;AAGHF,QAAAA,QAAQ,EAAEA,QAAQ,CAACG,KAHhB;AAIHC,QAAAA,IAAI,EAAE,CAJH;AAKHC,QAAAA,SAAS,EAAE,KALR;AAMHC,QAAAA,UAAU,EAAE;AANT,OAAP;AAQH,KAT2C,CAA5C;AAUAb,IAAAA,mBAAmB,CAACc,IAApB,CAAyB,GAAGT,eAA5B;AACAX,IAAAA,QAAQ,CAACH,kBAAkB,CAACO,OAAO,CAACM,EAAT,EAAaJ,mBAAb,CAAnB,CAAR;AACA,WAAOL,OAAO,CAACC,OAAR,EAAP;AACH,GAhBD;AAiBH,CAlBM","sourcesContent":["import { AppDispatch } from './store';\r\nimport { addProjectAction, addLanguagesAction } from './app/actions';\r\nimport { newProjectInitialState } from './initialState';\r\nimport { LanguageState, ProjectState, TranslationState } from './appState';\r\n\r\n/**\r\n * This function can be used in the future to create a project on the api\r\n * Then, according with result of http request, the data can be\r\n * stored as sucessfully or failed.\r\n * In this context, there's no failer flow, therefore, this function\r\n * trigger the action addProjectAction to add a new project\r\n */\r\nexport const createProject = (): ((dispatch: AppDispatch) => Promise<void>) => {\r\n    return dispatch => {\r\n        dispatch(addProjectAction(newProjectInitialState));\r\n        return Promise.resolve();\r\n    };\r\n};\r\n\r\n/**\r\n * This function can be used in the future to save the data on api\r\n * Then, according with result of http request, the data can be\r\n * stored as sucessfully or failed.\r\n * In this context, there's no failer flow, therefore, this function\r\n * trigger the action addLanguagesAction to add the languages to a\r\n * specific project id\r\n * @param projectId\r\n * @param languages\r\n */\r\nexport const addLanguages = (project: ProjectState, languages: LanguageState[]): ((dispatch: AppDispatch) => Promise<void>) => {\r\n    return dispatch => {\r\n        const translationSections = project.translationSections.slice();\r\n        let lastId = translationSections[translationSections.length - 1].id;\r\n        const newTranslations: TranslationState[] = languages.map(language => {\r\n            return {\r\n                id: ++lastId,\r\n                country: language.value,\r\n                language: language.label,\r\n                done: 0,\r\n                wordsToDo: 40000,\r\n                unverified: 0,\r\n            }\r\n        });\r\n        translationSections.push(...newTranslations);\r\n        dispatch(addLanguagesAction(project.id, translationSections));\r\n        return Promise.resolve();\r\n    };\r\n};"]},"metadata":{},"sourceType":"module"}