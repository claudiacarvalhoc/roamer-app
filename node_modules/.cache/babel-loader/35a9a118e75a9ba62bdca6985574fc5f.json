{"ast":null,"code":"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nconst initialState = {\n  title: 'Roamer App',\n  expand: false,\n  status: 'idle'\n}; // The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched. Thunks are\n// typically used to make async requests.\n\nexport const incrementAsync = createAsyncThunk('app/fetchProjects', async amount => {\n  // const response = await fetchCount(amount);\n  // The value we return becomes the `fulfilled` action payload\n  // return response.data;\n  return {};\n});\nexport const appSlice = createSlice({\n  name: 'counter',\n  initialState,\n  reducers: {\n    expand: state => {\n      state.expand = true;\n    },\n    collapse: state => {\n      state.expand = false;\n    }\n  } // The `extraReducers` field lets the slice handle actions defined elsewhere,\n  // including actions generated by createAsyncThunk or in other slices.\n  // extraReducers: (builder) => {\n  //     builder\n  //         .addCase(incrementAsync.pending, (state) => {\n  //             state.status = 'loading';\n  //         })\n  //         .addCase(incrementAsync.fulfilled, (state, action) => {\n  //             state.status = 'idle';\n  //             state.value += action.payload;\n  //         });\n  // },\n\n});\nexport const {\n  expand,\n  collapse\n} = appSlice.actions;\nexport const selectExpand = state => state.app.expand;\nexport const selectAppTitle = state => state.app.title;\nexport default appSlice.reducer;","map":{"version":3,"sources":["/Users/claudia.crisostomo/Documents/elvisp/lokalise-challenge/romaer-app-2/roamer-app/src/appSlice.ts"],"names":["createAsyncThunk","createSlice","initialState","title","expand","status","incrementAsync","amount","appSlice","name","reducers","state","collapse","actions","selectExpand","app","selectAppTitle","reducer"],"mappings":"AAAA,SAASA,gBAAT,EAA2BC,WAA3B,QAA6D,kBAA7D;AAUA,MAAMC,YAAsB,GAAG;AAC3BC,EAAAA,KAAK,EAAE,YADoB;AAE3BC,EAAAA,MAAM,EAAE,KAFmB;AAG3BC,EAAAA,MAAM,EAAE;AAHmB,CAA/B,C,CAMA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,cAAc,GAAGN,gBAAgB,CAC1C,mBAD0C,EAE1C,MAAOO,MAAP,IAA0B;AACtB;AACA;AACA;AACA,SAAO,EAAP;AACH,CAPyC,CAAvC;AAUP,OAAO,MAAMC,QAAQ,GAAGP,WAAW,CAAC;AAChCQ,EAAAA,IAAI,EAAE,SAD0B;AAEhCP,EAAAA,YAFgC;AAGhCQ,EAAAA,QAAQ,EAAE;AACNN,IAAAA,MAAM,EAAGO,KAAD,IAAW;AACfA,MAAAA,KAAK,CAACP,MAAN,GAAe,IAAf;AACH,KAHK;AAINQ,IAAAA,QAAQ,EAAGD,KAAD,IAAW;AACjBA,MAAAA,KAAK,CAACP,MAAN,GAAe,KAAf;AACH;AANK,GAHsB,CAWhC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAtBgC,CAAD,CAA5B;AAyBP,OAAO,MAAM;AAAEA,EAAAA,MAAF;AAAUQ,EAAAA;AAAV,IAAuBJ,QAAQ,CAACK,OAAtC;AAEP,OAAO,MAAMC,YAAY,GAAIH,KAAD,IAAsBA,KAAK,CAACI,GAAN,CAAUX,MAArD;AACP,OAAO,MAAMY,cAAc,GAAIL,KAAD,IAAsBA,KAAK,CAACI,GAAN,CAAUZ,KAAvD;AAEP,eAAeK,QAAQ,CAACS,OAAxB","sourcesContent":["import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { RootState, AppThunk } from './app/store';\n\n\nexport interface AppState {\n    title: string;\n    expand: boolean;\n    status: 'idle' | 'loading' | 'failed';\n}\n\nconst initialState: AppState = {\n    title: 'Roamer App',\n    expand: false,\n    status: 'idle',\n};\n\n// The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched. Thunks are\n// typically used to make async requests.\nexport const incrementAsync = createAsyncThunk(\n    'app/fetchProjects',\n    async (amount: number) => {\n        // const response = await fetchCount(amount);\n        // The value we return becomes the `fulfilled` action payload\n        // return response.data;\n        return {};\n    }\n);\n\nexport const appSlice = createSlice({\n    name: 'counter',\n    initialState,\n    reducers: {\n        expand: (state) => {\n            state.expand = true;\n        },\n        collapse: (state) => {\n            state.expand = false;\n        },\n    },\n    // The `extraReducers` field lets the slice handle actions defined elsewhere,\n    // including actions generated by createAsyncThunk or in other slices.\n    // extraReducers: (builder) => {\n    //     builder\n    //         .addCase(incrementAsync.pending, (state) => {\n    //             state.status = 'loading';\n    //         })\n    //         .addCase(incrementAsync.fulfilled, (state, action) => {\n    //             state.status = 'idle';\n    //             state.value += action.payload;\n    //         });\n    // },\n});\n\nexport const { expand, collapse } = appSlice.actions;\n\nexport const selectExpand = (state: RootState) => state.app.expand;\nexport const selectAppTitle = (state: RootState) => state.app.title;\n\nexport default appSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}