{"ast":null,"code":"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { initialSetup, fetchProjects } from '../api';\nconst initialState = {\n  expand: false,\n  status: 'idle'\n};\nexport const getProjectsAsync = createAsyncThunk('app/fetchProjects', async () => {\n  return new Promise(resolve => {\n    console.log('appSLice > getProjectsAsync > initialSetup');\n    initialSetup();\n    console.log('appSLice > getProjectsAsync > fetchProjects');\n    resolve(fetchProjects());\n  });\n});\nexport const appSlice = createSlice({\n  name: 'app',\n  initialState,\n  reducers: {\n    expand: state => {\n      state.expand = true;\n    },\n    collapse: state => {\n      state.expand = false;\n    }\n  },\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\n  // including actions generated by createAsyncThunk or in other slices.\n  extraReducers: builder => {\n    builder.addCase(getProjectsAsync.pending, state => {\n      console.log('getProjectsAsync > pending');\n    }).addCase(getProjectsAsync.fulfilled, (state, action) => {\n      console.log('getProjectsAsync > fulfilled');\n    }).addCase(getProjectsAsync.rejected, (state, action) => {\n      console.log('getProjectsAsync > rejected');\n    });\n  }\n});\nexport const {\n  expand,\n  collapse\n} = appSlice.actions;\nexport const selectExpand = state => state.app.expand;\nexport default appSlice.reducer;","map":{"version":3,"sources":["/Users/claudia.crisostomo/Documents/elvisp/lokalise-challenge/romaer-app-2/roamer-app/src/slice/appSlice.ts"],"names":["createAsyncThunk","createSlice","initialSetup","fetchProjects","initialState","expand","status","getProjectsAsync","Promise","resolve","console","log","appSlice","name","reducers","state","collapse","extraReducers","builder","addCase","pending","fulfilled","action","rejected","actions","selectExpand","app","reducer"],"mappings":"AAAA,SAASA,gBAAT,EAA2BC,WAA3B,QAA6D,kBAA7D;AAEA,SAASC,YAAT,EAAuBC,aAAvB,QAA4C,QAA5C;AAOA,MAAMC,YAAsB,GAAG;AAC3BC,EAAAA,MAAM,EAAE,KADmB;AAE3BC,EAAAA,MAAM,EAAE;AAFmB,CAA/B;AAKA,OAAO,MAAMC,gBAAgB,GAAGP,gBAAgB,CAC5C,mBAD4C,EAE5C,YAAY;AACR,SAAO,IAAIQ,OAAJ,CAAaC,OAAD,IAAa;AAC5BC,IAAAA,OAAO,CAACC,GAAR,CAAY,4CAAZ;AACAT,IAAAA,YAAY;AACZQ,IAAAA,OAAO,CAACC,GAAR,CAAY,6CAAZ;AACAF,IAAAA,OAAO,CAACN,aAAa,EAAd,CAAP;AACH,GALM,CAAP;AAMH,CAT2C,CAAzC;AAYP,OAAO,MAAMS,QAAQ,GAAGX,WAAW,CAAC;AAChCY,EAAAA,IAAI,EAAE,KAD0B;AAEhCT,EAAAA,YAFgC;AAGhCU,EAAAA,QAAQ,EAAE;AACNT,IAAAA,MAAM,EAAGU,KAAD,IAAW;AACfA,MAAAA,KAAK,CAACV,MAAN,GAAe,IAAf;AACH,KAHK;AAINW,IAAAA,QAAQ,EAAGD,KAAD,IAAW;AACjBA,MAAAA,KAAK,CAACV,MAAN,GAAe,KAAf;AACH;AANK,GAHsB;AAWhC;AACA;AACAY,EAAAA,aAAa,EAAGC,OAAD,IAAa;AACxBA,IAAAA,OAAO,CACFC,OADL,CACaZ,gBAAgB,CAACa,OAD9B,EACwCL,KAAD,IAAW;AAC1CL,MAAAA,OAAO,CAACC,GAAR,CAAY,4BAAZ;AACH,KAHL,EAIKQ,OAJL,CAIaZ,gBAAgB,CAACc,SAJ9B,EAIyC,CAACN,KAAD,EAAQO,MAAR,KAAmB;AACpDZ,MAAAA,OAAO,CAACC,GAAR,CAAY,8BAAZ;AACH,KANL,EAOKQ,OAPL,CAOaZ,gBAAgB,CAACgB,QAP9B,EAOwC,CAACR,KAAD,EAAQO,MAAR,KAAmB;AACnDZ,MAAAA,OAAO,CAACC,GAAR,CAAY,6BAAZ;AACH,KATL;AAUH;AAxB+B,CAAD,CAA5B;AA2BP,OAAO,MAAM;AAAEN,EAAAA,MAAF;AAAUW,EAAAA;AAAV,IAAuBJ,QAAQ,CAACY,OAAtC;AAEP,OAAO,MAAMC,YAAY,GAAIV,KAAD,IAAsBA,KAAK,CAACW,GAAN,CAAUrB,MAArD;AAEP,eAAeO,QAAQ,CAACe,OAAxB","sourcesContent":["import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';\r\nimport { RootState, AppThunk } from '../app/store';\r\nimport { initialSetup, fetchProjects } from '../api';\r\n\r\nexport interface AppState {\r\n    expand: boolean;\r\n    status: 'idle' | 'loading' | 'failed';\r\n}\r\n\r\nconst initialState: AppState = {\r\n    expand: false,\r\n    status: 'idle',\r\n};\r\n\r\nexport const getProjectsAsync = createAsyncThunk(\r\n    'app/fetchProjects',\r\n    async () => {\r\n        return new Promise((resolve) => {\r\n            console.log('appSLice > getProjectsAsync > initialSetup');\r\n            initialSetup();\r\n            console.log('appSLice > getProjectsAsync > fetchProjects');\r\n            resolve(fetchProjects());\r\n        });\r\n    }\r\n);\r\n\r\nexport const appSlice = createSlice({\r\n    name: 'app',\r\n    initialState,\r\n    reducers: {\r\n        expand: (state) => {\r\n            state.expand = true;\r\n        },\r\n        collapse: (state) => {\r\n            state.expand = false;\r\n        },\r\n    },\r\n    // The `extraReducers` field lets the slice handle actions defined elsewhere,\r\n    // including actions generated by createAsyncThunk or in other slices.\r\n    extraReducers: (builder) => {\r\n        builder\r\n            .addCase(getProjectsAsync.pending, (state) => {\r\n                console.log('getProjectsAsync > pending');\r\n            })\r\n            .addCase(getProjectsAsync.fulfilled, (state, action) => {\r\n                console.log('getProjectsAsync > fulfilled');\r\n            })\r\n            .addCase(getProjectsAsync.rejected, (state, action) => {\r\n                console.log('getProjectsAsync > rejected');\r\n            })\r\n    },\r\n});\r\n\r\nexport const { expand, collapse } = appSlice.actions;\r\n\r\nexport const selectExpand = (state: RootState) => state.app.expand;\r\n\r\nexport default appSlice.reducer;\r\n"]},"metadata":{},"sourceType":"module"}