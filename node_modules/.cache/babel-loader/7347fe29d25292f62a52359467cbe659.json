{"ast":null,"code":"import _regeneratorRuntime from\"/Users/claudia.crisostomo/Documents/elvisp/lokalise-challenge/romaer-app-2/roamer-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/claudia.crisostomo/Documents/elvisp/lokalise-challenge/romaer-app-2/roamer-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import{createAsyncThunk,createSlice}from'@reduxjs/toolkit';var initialState={title:'Roamer App',expand:false,status:'idle'};// The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched. Thunks are\n// typically used to make async requests.\nexport var incrementAsync=createAsyncThunk('app/fetchProjects',/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(amount){return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:return _context.abrupt(\"return\",{});case 1:case\"end\":return _context.stop();}}},_callee);}));return function(_x){return _ref.apply(this,arguments);};}());export var appSlice=createSlice({name:'counter',initialState:initialState,reducers:{expand:function expand(state){state.expand=true;},collapse:function collapse(state){state.expand=false;}}// The `extraReducers` field lets the slice handle actions defined elsewhere,\n// including actions generated by createAsyncThunk or in other slices.\n// extraReducers: (builder) => {\n//     builder\n//         .addCase(incrementAsync.pending, (state) => {\n//             state.status = 'loading';\n//         })\n//         .addCase(incrementAsync.fulfilled, (state, action) => {\n//             state.status = 'idle';\n//             state.value += action.payload;\n//         });\n// },\n});var _appSlice$actions=appSlice.actions,expand=_appSlice$actions.expand,collapse=_appSlice$actions.collapse;export{expand,collapse};export var selectExpand=function selectExpand(state){return state.app.expand;};export var selectAppTitle=function selectAppTitle(state){return state.app.title;};export default appSlice.reducer;","map":{"version":3,"sources":["/Users/claudia.crisostomo/Documents/elvisp/lokalise-challenge/romaer-app-2/roamer-app/src/appSlice.ts"],"names":["createAsyncThunk","createSlice","initialState","title","expand","status","incrementAsync","amount","appSlice","name","reducers","state","collapse","actions","selectExpand","app","selectAppTitle","reducer"],"mappings":"qZAAA,OAASA,gBAAT,CAA2BC,WAA3B,KAA6D,kBAA7D,CAUA,GAAMC,CAAAA,YAAsB,CAAG,CAC3BC,KAAK,CAAE,YADoB,CAE3BC,MAAM,CAAE,KAFmB,CAG3BC,MAAM,CAAE,MAHmB,CAA/B,CAMA;AACA;AACA;AACA;AACA;AACA,MAAO,IAAMC,CAAAA,cAAc,CAAGN,gBAAgB,CAC1C,mBAD0C,0FAE1C,iBAAOO,MAAP,kJAIW,EAJX,wDAF0C,+DAAvC,CAUP,MAAO,IAAMC,CAAAA,QAAQ,CAAGP,WAAW,CAAC,CAChCQ,IAAI,CAAE,SAD0B,CAEhCP,YAAY,CAAZA,YAFgC,CAGhCQ,QAAQ,CAAE,CACNN,MAAM,CAAE,gBAACO,KAAD,CAAW,CACfA,KAAK,CAACP,MAAN,CAAe,IAAf,CACH,CAHK,CAINQ,QAAQ,CAAE,kBAACD,KAAD,CAAW,CACjBA,KAAK,CAACP,MAAN,CAAe,KAAf,CACH,CANK,CAQV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAtBgC,CAAD,CAA5B,CAyBA,sBAA6BI,QAAQ,CAACK,OAAtC,CAAQT,MAAR,mBAAQA,MAAR,CAAgBQ,QAAhB,mBAAgBA,QAAhB,C,wBAEP,MAAO,IAAME,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,CAACH,KAAD,QAAsBA,CAAAA,KAAK,CAACI,GAAN,CAAUX,MAAhC,EAArB,CACP,MAAO,IAAMY,CAAAA,cAAc,CAAG,QAAjBA,CAAAA,cAAiB,CAACL,KAAD,QAAsBA,CAAAA,KAAK,CAACI,GAAN,CAAUZ,KAAhC,EAAvB,CAEP,cAAeK,CAAAA,QAAQ,CAACS,OAAxB","sourcesContent":["import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { RootState, AppThunk } from './app/store';\n\n\nexport interface AppState {\n    title: string;\n    expand: boolean;\n    status: 'idle' | 'loading' | 'failed';\n}\n\nconst initialState: AppState = {\n    title: 'Roamer App',\n    expand: false,\n    status: 'idle',\n};\n\n// The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched. Thunks are\n// typically used to make async requests.\nexport const incrementAsync = createAsyncThunk(\n    'app/fetchProjects',\n    async (amount: number) => {\n        // const response = await fetchCount(amount);\n        // The value we return becomes the `fulfilled` action payload\n        // return response.data;\n        return {};\n    }\n);\n\nexport const appSlice = createSlice({\n    name: 'counter',\n    initialState,\n    reducers: {\n        expand: (state) => {\n            state.expand = true;\n        },\n        collapse: (state) => {\n            state.expand = false;\n        },\n    },\n    // The `extraReducers` field lets the slice handle actions defined elsewhere,\n    // including actions generated by createAsyncThunk or in other slices.\n    // extraReducers: (builder) => {\n    //     builder\n    //         .addCase(incrementAsync.pending, (state) => {\n    //             state.status = 'loading';\n    //         })\n    //         .addCase(incrementAsync.fulfilled, (state, action) => {\n    //             state.status = 'idle';\n    //             state.value += action.payload;\n    //         });\n    // },\n});\n\nexport const { expand, collapse } = appSlice.actions;\n\nexport const selectExpand = (state: RootState) => state.app.expand;\nexport const selectAppTitle = (state: RootState) => state.app.title;\n\nexport default appSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}