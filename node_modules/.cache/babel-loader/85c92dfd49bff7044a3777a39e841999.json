{"ast":null,"code":"import React,{useCallback,useEffect}from'react';import{connect}from'react-redux';import'./styles.css';import Menu from'../menu';import Project from'../project';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var App=function App(){var dispatch=useAppDispatch();useEffect(function(){console.log('invoke getProjectsAsync');dispatch(getProjectsAsync);},[]);var handleClick=useCallback(function(){console.log('Clicked!');},[]);return/*#__PURE__*/_jsxs(\"div\",{className:\"App\",children:[/*#__PURE__*/_jsx(Menu,{}),/*#__PURE__*/_jsx(Project,{})]});};var mapStateToProps=function mapStateToProps(state){return{expand:state.expand,projects:state.projects};};var mapDispatchToProps=function mapDispatchToProps(dispatch){return{setSelectedAddressId:function setSelectedAddressId(selectedAddressId){dispatch(trackAddressChangeAction('select',selectedAddressId));dispatch(setAddressChangeSelectedAddress(selectedAddressId));},trackLoad:function trackLoad(addresses){return dispatch(trackAddressChangeLoadAddresses(addresses));},trackEdit:function trackEdit(addressId){return dispatch(trackAddressChangeAction('edit',addressId));},trackAdd:function trackAdd(){return dispatch(trackAddressChangeAction('add'));}};};export default connect(mapStateToProps,mapDispatchToProps)(App);","map":{"version":3,"sources":["/Users/claudia.crisostomo/Documents/elvisp/lokalise-challenge/romaer-app-2/roamer-app/src/components/app/index.tsx"],"names":["React","useCallback","useEffect","connect","Menu","Project","App","dispatch","useAppDispatch","console","log","getProjectsAsync","handleClick","mapStateToProps","state","expand","projects","mapDispatchToProps","setSelectedAddressId","selectedAddressId","trackAddressChangeAction","setAddressChangeSelectedAddress","trackLoad","addresses","trackAddressChangeLoadAddresses","trackEdit","addressId","trackAdd"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,EAAoBC,WAApB,CAAiCC,SAAjC,KAAkD,OAAlD,CACA,OAASC,OAAT,KAAwB,aAAxB,CAEA,MAAO,cAAP,CACA,MAAOC,CAAAA,IAAP,KAAiB,SAAjB,CACA,MAAOC,CAAAA,OAAP,KAAoB,YAApB,C,wFAGA,GAAMC,CAAAA,GAAO,CAAG,QAAVA,CAAAA,GAAU,EAAM,CAEpB,GAAMC,CAAAA,QAAQ,CAAGC,cAAc,EAA/B,CACAN,SAAS,CAAC,UAAM,CACdO,OAAO,CAACC,GAAR,CAAY,yBAAZ,EACAH,QAAQ,CAACI,gBAAD,CAAR,CACD,CAHQ,CAGN,EAHM,CAAT,CAKA,GAAMC,CAAAA,WAAW,CAAGX,WAAW,CAAC,UAAM,CACpCQ,OAAO,CAACC,GAAR,CAAY,UAAZ,EACD,CAF8B,CAE5B,EAF4B,CAA/B,CAGA,mBACE,aAAK,SAAS,CAAC,KAAf,wBACE,KAAC,IAAD,IADF,cAEE,KAAC,OAAD,IAFF,GADF,CAMD,CAjBD,CA4BA,GAAMG,CAAAA,eAAe,CAAG,QAAlBA,CAAAA,eAAkB,CAACC,KAAD,QAAqC,CAC3DC,MAAM,CAAED,KAAK,CAACC,MAD6C,CAE3DC,QAAQ,CAAEF,KAAK,CAACE,QAF2C,CAArC,EAAxB,CAKA,GAAMC,CAAAA,kBAAkB,CAAG,QAArBA,CAAAA,kBAAqB,CACzBV,QADyB,QAEH,CACtBW,oBAAoB,CAAE,8BAACC,iBAAD,CAA+B,CACnDZ,QAAQ,CAACa,wBAAwB,CAAC,QAAD,CAAWD,iBAAX,CAAzB,CAAR,CACAZ,QAAQ,CAACc,+BAA+B,CAACF,iBAAD,CAAhC,CAAR,CACD,CAJqB,CAKtBG,SAAS,CAAE,mBAACC,SAAD,QAA8BhB,CAAAA,QAAQ,CAACiB,+BAA+B,CAACD,SAAD,CAAhC,CAAtC,EALW,CAMtBE,SAAS,CAAE,mBAACC,SAAD,QAAuBnB,CAAAA,QAAQ,CAACa,wBAAwB,CAAC,MAAD,CAASM,SAAT,CAAzB,CAA/B,EANW,CAOtBC,QAAQ,CAAE,0BAAMpB,CAAAA,QAAQ,CAACa,wBAAwB,CAAC,KAAD,CAAzB,CAAd,EAPY,CAFG,EAA3B,CAaA,cAAejB,CAAAA,OAAO,CACpBU,eADoB,CAEpBI,kBAFoB,CAAP,CAGbX,GAHa,CAAf","sourcesContent":["import React, { FC, useCallback, useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { AppState, ProjectProperties } from '../../redux/appState';\r\nimport './styles.css';\r\nimport Menu from '../menu';\r\nimport Project from '../project';\r\n\r\n\r\nconst App: FC = () => {\r\n\r\n  const dispatch = useAppDispatch();\r\n  useEffect(() => {\r\n    console.log('invoke getProjectsAsync');\r\n    dispatch(getProjectsAsync);\r\n  }, []);\r\n\r\n  const handleClick = useCallback(() => {\r\n    console.log('Clicked!');\r\n  }, []);\r\n  return (\r\n    <div className=\"App\">\r\n      <Menu />\r\n      <Project />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport interface AppStateProps {\r\n  expand: boolean;\r\n  projects: ProjectProperties[];\r\n}\r\n\r\nexport interface AppDispatchProps {\r\n  fetchProjects: () => void;\r\n}\r\n\r\nconst mapStateToProps = (state: AppState): AppStateProps => ({\r\n  expand: state.expand,\r\n  projects: state.projects,\r\n});\r\n\r\nconst mapDispatchToProps = (\r\n  dispatch: ProjectLoadSuccess\r\n): AppDispatchProps => ({\r\n  setSelectedAddressId: (selectedAddressId: string) => {\r\n    dispatch(trackAddressChangeAction('select', selectedAddressId));\r\n    dispatch(setAddressChangeSelectedAddress(selectedAddressId));\r\n  },\r\n  trackLoad: (addresses: FlatAddress[]) => dispatch(trackAddressChangeLoadAddresses(addresses)),\r\n  trackEdit: (addressId: string) => dispatch(trackAddressChangeAction('edit', addressId)),\r\n  trackAdd: () => dispatch(trackAddressChangeAction('add')),\r\n});\r\n\r\n\r\nexport default connect<AppStateProps, AppDispatchProps>(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(App);"]},"metadata":{},"sourceType":"module"}