{"ast":null,"code":"import React from'react';// import cn from 'classnames';\nimport styles from'./summary.module.css';import{projectTexts}from'../../redux/app/selectors';import{connect}from'react-redux';import ProgressBar from'../progressbar';import Label from'../label';import Icons from'../icons';import Badge from'../badge';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";var Summary=function Summary(_ref){var project=_ref.project,texts=_ref.texts;var hasBadges=project.badges.length>0;return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(\"h1\",{className:styles.summaryTitle,children:project.name}),/*#__PURE__*/_jsx(ProgressBar,{className:styles.progressBar,percentage:project.done,size:'small'}),/*#__PURE__*/_jsxs(\"div\",{className:styles.line,children:[/*#__PURE__*/_jsx(Label,{name:texts.doneText,value:\"\".concat(project.done,\"%\"),highlighted:false}),/*#__PURE__*/_jsx(Label,{name:texts.baseWordsText,value:\"\".concat(project.baseWords),highlighted:false})]}),/*#__PURE__*/_jsxs(\"div\",{className:styles.line,children:[/*#__PURE__*/_jsx(Label,{name:texts.teamText,value:\"\".concat(project.team),highlighted:true}),/*#__PURE__*/_jsx(Label,{name:texts.keysText,value:\"\".concat(project.keys),highlighted:false})]}),/*#__PURE__*/_jsx(\"div\",{className:styles.line,children:/*#__PURE__*/_jsx(Label,{name:texts.qaIssuesText,value:\"\".concat(project.issues),highlighted:true})}),/*#__PURE__*/_jsx(\"div\",{className:styles.iconsLines,children:/*#__PURE__*/_jsx(Icons,{className:styles.icons})}),/*#__PURE__*/_jsx(\"div\",{className:styles.badgesLine,children:hasBadges&&project.badges.map(function(b){return/*#__PURE__*/_jsx(Badge,{className:styles.badge,name:b});})})]});};var mapStateToProps=function mapStateToProps(state){return{texts:projectTexts(state)};};export default connect(mapStateToProps)(Summary);","map":{"version":3,"sources":["/Users/claudia.crisostomo/Documents/elvisp/lokalise-challenge/romaer-app-2/roamer-app/src/components/summary/index.tsx"],"names":["React","styles","projectTexts","connect","ProgressBar","Label","Icons","Badge","Summary","project","texts","hasBadges","badges","length","summaryTitle","name","progressBar","done","line","doneText","baseWordsText","baseWords","teamText","team","keysText","keys","qaIssuesText","issues","iconsLines","icons","badgesLine","map","b","badge","mapStateToProps","state"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,KAA0B,OAA1B,CAGA;AACA,MAAOC,CAAAA,MAAP,KAAmB,sBAAnB,CACA,OAASC,YAAT,KAA6B,2BAA7B,CACA,OAASC,OAAT,KAAwB,aAAxB,CACA,MAAOC,CAAAA,WAAP,KAAwB,gBAAxB,CACA,MAAOC,CAAAA,KAAP,KAAkB,UAAlB,CACA,MAAOC,CAAAA,KAAP,KAAkB,UAAlB,CAEA,MAAOC,CAAAA,KAAP,KAAkB,UAAlB,C,6IAcA,GAAMC,CAAAA,OAAyB,CAAG,QAA5BA,CAAAA,OAA4B,MAAwB,IAArBC,CAAAA,OAAqB,MAArBA,OAAqB,CAAZC,KAAY,MAAZA,KAAY,CACtD,GAAMC,CAAAA,SAAS,CAAGF,OAAO,CAACG,MAAR,CAAeC,MAAf,CAAwB,CAA1C,CACA,mBACI,wCACI,WAAI,SAAS,CAAEZ,MAAM,CAACa,YAAtB,UAAqCL,OAAO,CAACM,IAA7C,EADJ,cAEI,KAAC,WAAD,EAAa,SAAS,CAAEd,MAAM,CAACe,WAA/B,CAA4C,UAAU,CAAEP,OAAO,CAACQ,IAAhE,CAAsE,IAAI,CAAE,OAA5E,EAFJ,cAGI,aAAK,SAAS,CAAEhB,MAAM,CAACiB,IAAvB,wBACI,KAAC,KAAD,EAAO,IAAI,CAAER,KAAK,CAACS,QAAnB,CAA6B,KAAK,WAAKV,OAAO,CAACQ,IAAb,KAAlC,CAAwD,WAAW,CAAE,KAArE,EADJ,cAEI,KAAC,KAAD,EAAO,IAAI,CAAEP,KAAK,CAACU,aAAnB,CAAkC,KAAK,WAAKX,OAAO,CAACY,SAAb,CAAvC,CAAiE,WAAW,CAAE,KAA9E,EAFJ,GAHJ,cAOI,aAAK,SAAS,CAAEpB,MAAM,CAACiB,IAAvB,wBACI,KAAC,KAAD,EAAO,IAAI,CAAER,KAAK,CAACY,QAAnB,CAA6B,KAAK,WAAKb,OAAO,CAACc,IAAb,CAAlC,CAAuD,WAAW,CAAE,IAApE,EADJ,cAEI,KAAC,KAAD,EAAO,IAAI,CAAEb,KAAK,CAACc,QAAnB,CAA6B,KAAK,WAAKf,OAAO,CAACgB,IAAb,CAAlC,CAAuD,WAAW,CAAE,KAApE,EAFJ,GAPJ,cAWI,YAAK,SAAS,CAAExB,MAAM,CAACiB,IAAvB,uBACI,KAAC,KAAD,EAAO,IAAI,CAAER,KAAK,CAACgB,YAAnB,CAAiC,KAAK,WAAKjB,OAAO,CAACkB,MAAb,CAAtC,CAA6D,WAAW,CAAE,IAA1E,EADJ,EAXJ,cAcI,YAAK,SAAS,CAAE1B,MAAM,CAAC2B,UAAvB,uBACI,KAAC,KAAD,EAAO,SAAS,CAAE3B,MAAM,CAAC4B,KAAzB,EADJ,EAdJ,cAiBI,YAAK,SAAS,CAAE5B,MAAM,CAAC6B,UAAvB,UACKnB,SAAS,EAAIF,OAAO,CAACG,MAAR,CAAemB,GAAf,CAAmB,SAAAC,CAAC,qBAAI,KAAC,KAAD,EAAO,SAAS,CAAE/B,MAAM,CAACgC,KAAzB,CAAgC,IAAI,CAAED,CAAtC,EAAJ,EAApB,CADlB,EAjBJ,GADJ,CAuBH,CAzBD,CA2BA,GAAME,CAAAA,eAAe,CAAG,QAAlBA,CAAAA,eAAkB,CAACC,KAAD,QAA0C,CAC9DzB,KAAK,CAAER,YAAY,CAACiC,KAAD,CAD2C,CAA1C,EAAxB,CAIA,cAAehC,CAAAA,OAAO,CAClB+B,eADkB,CAAP,CAEb1B,OAFa,CAAf","sourcesContent":["import React, { FC } from 'react';\r\nimport { ProjectProperties, ProjectTextsProperties } from '../../redux/appState';\r\nimport { RootState } from '../../redux/reducers';\r\n// import cn from 'classnames';\r\nimport styles from './summary.module.css';\r\nimport { projectTexts } from '../../redux/app/selectors';\r\nimport { connect } from 'react-redux';\r\nimport ProgressBar from '../progressbar';\r\nimport Label from '../label';\r\nimport Icons from '../icons';\r\nimport { InvalidatedProjectKind } from 'typescript';\r\nimport Badge from '../badge';\r\nimport { strict } from 'assert';\r\n\r\n\r\nexport interface SummaryOwnProps {\r\n    project: ProjectProperties;\r\n}\r\n\r\nexport interface SummaryStateProps {\r\n    texts: ProjectTextsProperties;\r\n}\r\n\r\ntype SummaryProps = SummaryOwnProps & SummaryStateProps;\r\n\r\nconst Summary: FC<SummaryProps> = ({ project, texts }) => {\r\n    const hasBadges = project.badges.length > 0;\r\n    return (\r\n        <>\r\n            <h1 className={styles.summaryTitle}>{project.name}</h1>\r\n            <ProgressBar className={styles.progressBar} percentage={project.done} size={'small'} />\r\n            <div className={styles.line}>\r\n                <Label name={texts.doneText} value={`${project.done}%`} highlighted={false} />\r\n                <Label name={texts.baseWordsText} value={`${project.baseWords}`} highlighted={false} />\r\n            </div>\r\n            <div className={styles.line}>\r\n                <Label name={texts.teamText} value={`${project.team}`} highlighted={true} />\r\n                <Label name={texts.keysText} value={`${project.keys}`} highlighted={false} />\r\n            </div>\r\n            <div className={styles.line}>\r\n                <Label name={texts.qaIssuesText} value={`${project.issues}`} highlighted={true} />\r\n            </div>\r\n            <div className={styles.iconsLines}>\r\n                <Icons className={styles.icons} />\r\n            </div>\r\n            <div className={styles.badgesLine}>\r\n                {hasBadges && project.badges.map(b => <Badge className={styles.badge} name={b} />)}\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state: RootState): SummaryStateProps => ({\r\n    texts: projectTexts(state),\r\n});\r\n\r\nexport default connect<SummaryStateProps>(\r\n    mapStateToProps,\r\n)(Summary);\r\n"]},"metadata":{},"sourceType":"module"}