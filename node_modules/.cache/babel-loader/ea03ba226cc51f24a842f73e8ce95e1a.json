{"ast":null,"code":"var _jsxFileName = \"/Users/claudia.crisostomo/Documents/elvisp/lokalise-challenge/romaer-app-2/roamer-app/src/components/project/index.tsx\";\nimport React from 'react';\nimport Summary from '../summary';\nimport cn from 'classnames';\nimport styles from './project.module.css';\nimport Divider from '../divider';\nimport Card from '../card';\nimport { connect } from 'react-redux';\nimport { isExpanded, projectTexts } from '../../redux/app/selectors';\nimport Button from '../button';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Project = ({\n  className,\n  isExpanded,\n  addLanguageText,\n  project\n}) => {\n  const {\n    translationSections\n  } = project;\n  const isTranslationEmpty = translationSections.length === 0;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: cn(className, styles.container, {\n      [styles.collapsed]: !isExpanded\n    }),\n    children: [/*#__PURE__*/_jsxDEV(Summary, {\n      project: project\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 13\n    }, this), isExpanded && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Divider, {\n        className: styles.divider\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.cards,\n        children: [!isTranslationEmpty && translationSections.map(translation => /*#__PURE__*/_jsxDEV(Card, {\n          className: styles.card,\n          translation: translation\n        }, `translation_${translation.id}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 88\n        }, this)), /*#__PURE__*/_jsxDEV(Button, {\n          className: styles.addcard,\n          text: addLanguageText,\n          type: 'secondary',\n          onClick: () => console.log('add new language')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 9\n  }, this);\n};\n\n_c = Project;\n\nconst mapStateToProps = state => ({\n  addLanguageText: projectTexts(state).addLanguageText,\n  isExpanded: isExpanded(state)\n});\n\nexport default connect(mapStateToProps)(Project);\n\nvar _c;\n\n$RefreshReg$(_c, \"Project\");","map":{"version":3,"sources":["/Users/claudia.crisostomo/Documents/elvisp/lokalise-challenge/romaer-app-2/roamer-app/src/components/project/index.tsx"],"names":["React","Summary","cn","styles","Divider","Card","connect","isExpanded","projectTexts","Button","Project","className","addLanguageText","project","translationSections","isTranslationEmpty","length","container","collapsed","divider","cards","map","translation","card","id","addcard","console","log","mapStateToProps","state"],"mappings":";AAAA,OAAOA,KAAP,MAA0B,OAA1B;AAEA,OAAOC,OAAP,MAAoB,YAApB;AACA,OAAOC,EAAP,MAAe,YAAf;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,OAAOC,OAAP,MAAoB,YAApB;AACA,OAAOC,IAAP,MAAiB,SAAjB;AAEA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,UAAT,EAAqBC,YAArB,QAAyC,2BAAzC;AACA,OAAOC,MAAP,MAAmB,WAAnB;;;;AAiBA,MAAMC,OAAyB,GAAG,CAAC;AAAEC,EAAAA,SAAF;AAAaJ,EAAAA,UAAb;AAAyBK,EAAAA,eAAzB;AAA0CC,EAAAA;AAA1C,CAAD,KAAyD;AACvF,QAAM;AAAEC,IAAAA;AAAF,MAA0BD,OAAhC;AACA,QAAME,kBAAkB,GAAGD,mBAAmB,CAACE,MAApB,KAA+B,CAA1D;AACA,sBACI;AAAK,IAAA,SAAS,EAAEd,EAAE,CAACS,SAAD,EAAYR,MAAM,CAACc,SAAnB,EAA8B;AAC5C,OAACd,MAAM,CAACe,SAAR,GAAoB,CAACX;AADuB,KAA9B,CAAlB;AAAA,4BAGI,QAAC,OAAD;AAAS,MAAA,OAAO,EAAEM;AAAlB;AAAA;AAAA;AAAA;AAAA,YAHJ,EAIKN,UAAU,iBACP;AAAA,8BACI,QAAC,OAAD;AAAS,QAAA,SAAS,EAAEJ,MAAM,CAACgB;AAA3B;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAK,QAAA,SAAS,EAAEhB,MAAM,CAACiB,KAAvB;AAAA,mBACK,CAACL,kBAAD,IAAuBD,mBAAmB,CAACO,GAApB,CAAwBC,WAAW,iBAAI,QAAC,IAAD;AAA4C,UAAA,SAAS,EAAEnB,MAAM,CAACoB,IAA9D;AAAoE,UAAA,WAAW,EAAED;AAAjF,WAAY,eAAcA,WAAW,CAACE,EAAG,EAAzC;AAAA;AAAA;AAAA;AAAA,gBAAvC,CAD5B,eAEI,QAAC,MAAD;AAAQ,UAAA,SAAS,EAAErB,MAAM,CAACsB,OAA1B;AAAmC,UAAA,IAAI,EAAEb,eAAzC;AAA0D,UAAA,IAAI,EAAE,WAAhE;AAA6E,UAAA,OAAO,EAAE,MAAMc,OAAO,CAACC,GAAR,CAAY,kBAAZ;AAA5F;AAAA;AAAA;AAAA;AAAA,gBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,cAFJ;AAAA,oBALR;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAgBH,CAnBD;;KAAMjB,O;;AAsBN,MAAMkB,eAAe,GAAIC,KAAD,KAA0C;AAC9DjB,EAAAA,eAAe,EAAEJ,YAAY,CAACqB,KAAD,CAAZ,CAAoBjB,eADyB;AAE9DL,EAAAA,UAAU,EAAEA,UAAU,CAACsB,KAAD;AAFwC,CAA1C,CAAxB;;AAKA,eAAevB,OAAO,CAClBsB,eADkB,CAAP,CAEblB,OAFa,CAAf","sourcesContent":["import React, { FC } from 'react';\r\nimport { ProjectState } from '../../redux/appState';\r\nimport Summary from '../summary';\r\nimport cn from 'classnames';\r\nimport styles from './project.module.css';\r\nimport Divider from '../divider';\r\nimport Card from '../card';\r\nimport { RootState } from '../../redux/reducers';\r\nimport { connect } from 'react-redux';\r\nimport { isExpanded, projectTexts } from '../../redux/app/selectors';\r\nimport Button from '../button';\r\n\r\nexport interface ProjectOwnProps {\r\n    className: string;\r\n    project: ProjectState;\r\n}\r\n\r\nexport interface ProjectStateProps {\r\n    isExpanded: boolean;\r\n    addLanguageText: string;\r\n}\r\n\r\nexport interface ProjectDispatchProps {\r\n}\r\n\r\nexport type ProjectProps = ProjectOwnProps & ProjectStateProps & ProjectDispatchProps;\r\n\r\nconst Project: FC<ProjectProps> = ({ className, isExpanded, addLanguageText, project }) => {\r\n    const { translationSections } = project;\r\n    const isTranslationEmpty = translationSections.length === 0;\r\n    return (\r\n        <div className={cn(className, styles.container, {\r\n            [styles.collapsed]: !isExpanded\r\n        })}>\r\n            <Summary project={project} />\r\n            {isExpanded && (\r\n                <>\r\n                    <Divider className={styles.divider} />\r\n                    <div className={styles.cards}>\r\n                        {!isTranslationEmpty && translationSections.map(translation => <Card key={`translation_${translation.id}`} className={styles.card} translation={translation} />)}\r\n                        <Button className={styles.addcard} text={addLanguageText} type={'secondary'} onClick={() => console.log('add new language')} />\r\n                    </div>\r\n                </>)\r\n            }\r\n        </div >\r\n    );\r\n};\r\n\r\n\r\nconst mapStateToProps = (state: RootState): ProjectStateProps => ({\r\n    addLanguageText: projectTexts(state).addLanguageText,\r\n    isExpanded: isExpanded(state),\r\n});\r\n\r\nexport default connect<ProjectStateProps>(\r\n    mapStateToProps,\r\n)(Project);"]},"metadata":{},"sourceType":"module"}