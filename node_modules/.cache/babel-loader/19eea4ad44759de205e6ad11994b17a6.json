{"ast":null,"code":"const projectKey = 'projects';\nexport const resetStorage = () => {\n  clean(projectKey);\n  add(projectKey, []);\n};\nexport const addProject = project => {\n  const projects = get(projectKey);\n  projects.push(project);\n  add(projectKey, projects);\n};\nexport const getProjects = () => {\n  return get(projectKey);\n};\n\nconst get = key => {\n  return JSON.parse(localStorage.get(key));\n};\n\nconst add = (key, value) => {\n  localStorage.setItem(key, JSON.stringify(value));\n};\n\nconst clean = key => {\n  localStorage.removeItem(key);\n};","map":{"version":3,"sources":["/Users/claudia.crisostomo/Documents/elvisp/lokalise-challenge/romaer-app-2/roamer-app/src/storage/index.tsx"],"names":["projectKey","resetStorage","clean","add","addProject","project","projects","get","push","getProjects","key","JSON","parse","localStorage","value","setItem","stringify","removeItem"],"mappings":"AACA,MAAMA,UAAU,GAAG,UAAnB;AAEA,OAAO,MAAMC,YAAY,GAAG,MAAY;AACpCC,EAAAA,KAAK,CAACF,UAAD,CAAL;AACAG,EAAAA,GAAG,CAACH,UAAD,EAAa,EAAb,CAAH;AACH,CAHM;AAKP,OAAO,MAAMI,UAAU,GAAIC,OAAD,IAAsC;AAC5D,QAAMC,QAA6B,GAAGC,GAAG,CAACP,UAAD,CAAzC;AACAM,EAAAA,QAAQ,CAACE,IAAT,CAAcH,OAAd;AACAF,EAAAA,GAAG,CAACH,UAAD,EAAaM,QAAb,CAAH;AACH,CAJM;AAMP,OAAO,MAAMG,WAAW,GAAG,MAA2B;AAClD,SAAOF,GAAG,CAACP,UAAD,CAAV;AACH,CAFM;;AAIP,MAAMO,GAAG,GAAIG,GAAD,IAAsB;AAC9B,SAAOC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACN,GAAb,CAAiBG,GAAjB,CAAX,CAAP;AACH,CAFD;;AAIA,MAAMP,GAAG,GAAG,CAACO,GAAD,EAAcI,KAAd,KAAmC;AAC3CD,EAAAA,YAAY,CAACE,OAAb,CAAqBL,GAArB,EAA0BC,IAAI,CAACK,SAAL,CAAeF,KAAf,CAA1B;AACH,CAFD;;AAIA,MAAMZ,KAAK,GAAIQ,GAAD,IAAiB;AAC3BG,EAAAA,YAAY,CAACI,UAAb,CAAwBP,GAAxB;AACH,CAFD","sourcesContent":["import { ProjectProperties } from \"../redux/appState\";\r\nconst projectKey = 'projects';\r\n\r\nexport const resetStorage = (): void => {\r\n    clean(projectKey);\r\n    add(projectKey, []);\r\n};\r\n\r\nexport const addProject = (project: ProjectProperties): void => {\r\n    const projects: ProjectProperties[] = get(projectKey);\r\n    projects.push(project);\r\n    add(projectKey, projects);\r\n};\r\n\r\nexport const getProjects = (): ProjectProperties[] => {\r\n    return get(projectKey);\r\n};\r\n\r\nconst get = (key: string): any => {\r\n    return JSON.parse(localStorage.get(key));\r\n};\r\n\r\nconst add = (key: string, value: any): void => {\r\n    localStorage.setItem(key, JSON.stringify(value));\r\n};\r\n\r\nconst clean = (key: string) => {\r\n    localStorage.removeItem(key);\r\n}"]},"metadata":{},"sourceType":"module"}