{"ast":null,"code":"var _jsxFileName = \"/Users/claudia.crisostomo/Documents/elvisp/lokalise-challenge/romaer-app-2/roamer-app/src/components/project/index.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport Summary from '../summary';\nimport cn from 'classnames';\nimport styles from './project.module.css';\nimport Divider from '../divider';\nimport Card from '../card';\nimport { connect } from 'react-redux';\nimport { isExpanded, projectTexts } from '../../redux/app/selectors';\nimport Button from '../button';\nimport Modal from '../modal';\nimport Select from 'react-select';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Project = props => {\n  _s();\n\n  const {\n    className,\n    isExpanded,\n    addLanguageText,\n    modalTitleText,\n    closeButtonText,\n    addButtonText,\n    languagesOptions,\n    project\n  } = props;\n  const {\n    translationSections\n  } = project;\n  const isTranslationEmpty = translationSections.length === 0;\n  const [isModalVisible, setModalVisibility] = useState(false);\n\n  const handleOpenModal = () => {\n    setModalVisibility(true);\n  };\n\n  const handleCloseModal = () => {\n    setModalVisibility(false);\n  };\n\n  const handleAddLanguage = () => {\n    console.log('trigger event!!');\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: cn(className, styles.container, {\n      [styles.collapsed]: !isExpanded\n    }),\n    children: [/*#__PURE__*/_jsxDEV(Summary, {\n      project: project\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }, this), isExpanded && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Divider, {\n        className: styles.divider\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.cards,\n        children: [!isTranslationEmpty && translationSections.map(translation => /*#__PURE__*/_jsxDEV(Card, {\n          className: styles.card,\n          translation: translation\n        }, `translation_${translation.id}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 88\n        }, this)), /*#__PURE__*/_jsxDEV(Button, {\n          className: styles.addcard,\n          text: addLanguageText,\n          type: 'secondary',\n          onClick: handleOpenModal\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true), isModalVisible && /*#__PURE__*/_jsxDEV(Modal, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.modal,\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: styles.modalTitle,\n          children: modalTitleText\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.modalSelect,\n          children: /*#__PURE__*/_jsxDEV(Select, {\n            isMulti: true,\n            options: languagesOptions,\n            onChange: (value, action) => console.log({\n              value,\n              action\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.modalButtons,\n          children: [/*#__PURE__*/_jsxDEV(Button, {\n            className: styles.modalButton,\n            text: closeButtonText,\n            type: 'secondary',\n            onClick: handleCloseModal\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            className: styles.modalButton,\n            text: addButtonText,\n            type: 'primary',\n            onClick: handleAddLanguage\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Project, \"pLpXbOPPrVC62zaTa9DOZcboVL4=\");\n\n_c = Project;\n\nconst mapStateToProps = state => {\n  const texts = projectTexts(state);\n  return {\n    addLanguageText: texts.addLanguageText,\n    isExpanded: isExpanded(state),\n    closeButtonText: texts.closeButtonText,\n    addButtonText: texts.addButtonText,\n    modalTitleText: texts.modalTitleText,\n    languagesOptions: texts.languate\n  };\n};\n\nexport default connect(mapStateToProps)(Project);\n\nvar _c;\n\n$RefreshReg$(_c, \"Project\");","map":{"version":3,"sources":["/Users/claudia.crisostomo/Documents/elvisp/lokalise-challenge/romaer-app-2/roamer-app/src/components/project/index.tsx"],"names":["React","useState","Summary","cn","styles","Divider","Card","connect","isExpanded","projectTexts","Button","Modal","Select","Project","props","className","addLanguageText","modalTitleText","closeButtonText","addButtonText","languagesOptions","project","translationSections","isTranslationEmpty","length","isModalVisible","setModalVisibility","handleOpenModal","handleCloseModal","handleAddLanguage","console","log","container","collapsed","divider","cards","map","translation","card","id","addcard","modal","modalTitle","modalSelect","value","action","modalButtons","modalButton","mapStateToProps","state","texts","languate"],"mappings":"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","sourcesContent":["import React, { FC, useState } from 'react';\r\nimport { ProjectState } from '../../redux/appState';\r\nimport Summary from '../summary';\r\nimport cn from 'classnames';\r\nimport styles from './project.module.css';\r\nimport Divider from '../divider';\r\nimport Card from '../card';\r\nimport { RootState } from '../../redux/reducers';\r\nimport { connect } from 'react-redux';\r\nimport { isExpanded, projectTexts } from '../../redux/app/selectors';\r\nimport Button from '../button';\r\nimport Modal from '../modal';\r\nimport Select from 'react-select'\r\n\r\nexport interface ProjectOwnProps {\r\n    className: string;\r\n    project: ProjectState;\r\n}\r\n\r\nexport interface ProjectStateProps {\r\n    isExpanded: boolean;\r\n    addLanguageText: string;\r\n    modalTitleText: string;\r\n    closeButtonText: string;\r\n    addButtonText: string;\r\n    languagesOptions: LanguageState[];\r\n}\r\n\r\nexport interface ProjectDispatchProps {\r\n}\r\n\r\nexport type ProjectProps = ProjectOwnProps & ProjectStateProps & ProjectDispatchProps;\r\n\r\nconst Project: FC<ProjectProps> = (props) => {\r\n    const {\r\n        className,\r\n        isExpanded,\r\n        addLanguageText,\r\n        modalTitleText,\r\n        closeButtonText,\r\n        addButtonText,\r\n        languagesOptions,\r\n        project\r\n    } = props;\r\n    const { translationSections } = project;\r\n    const isTranslationEmpty = translationSections.length === 0;\r\n    const [isModalVisible, setModalVisibility] = useState(false);\r\n\r\n    const handleOpenModal = (): void => {\r\n        setModalVisibility(true);\r\n    };\r\n    const handleCloseModal = (): void => {\r\n        setModalVisibility(false);\r\n    };\r\n    const handleAddLanguage = (): void => {\r\n        console.log('trigger event!!');\r\n    };\r\n\r\n    return (\r\n        <div className={cn(className, styles.container, {\r\n            [styles.collapsed]: !isExpanded\r\n        })}>\r\n            <Summary project={project} />\r\n            {isExpanded && (\r\n                <>\r\n                    <Divider className={styles.divider} />\r\n                    <div className={styles.cards}>\r\n                        {!isTranslationEmpty && translationSections.map(translation => <Card key={`translation_${translation.id}`} className={styles.card} translation={translation} />)}\r\n                        <Button className={styles.addcard} text={addLanguageText} type={'secondary'} onClick={handleOpenModal} />\r\n                    </div>\r\n                </>)\r\n            }\r\n            {isModalVisible && (\r\n                <Modal>\r\n                    <div className={styles.modal}>\r\n                        <h2 className={styles.modalTitle} >{modalTitleText}</h2>\r\n                        <div className={styles.modalSelect}>\r\n                            <Select\r\n                                isMulti\r\n                                options={languagesOptions}\r\n                                onChange={(value, action) => console.log({ value, action })}\r\n                            />\r\n                        </div>\r\n                        <div className={styles.modalButtons}>\r\n                            <Button className={styles.modalButton} text={closeButtonText} type={'secondary'} onClick={handleCloseModal} />\r\n                            <Button className={styles.modalButton} text={addButtonText} type={'primary'} onClick={handleAddLanguage} />\r\n                        </div>\r\n                    </div>\r\n                </Modal>\r\n\r\n            )}\r\n        </div >\r\n    );\r\n};\r\n\r\n\r\nconst mapStateToProps = (state: RootState): ProjectStateProps => {\r\n    const texts = projectTexts(state);\r\n    return {\r\n        addLanguageText: texts.addLanguageText,\r\n        isExpanded: isExpanded(state),\r\n        closeButtonText: texts.closeButtonText,\r\n        addButtonText: texts.addButtonText,\r\n        modalTitleText: texts.modalTitleText,\r\n        languagesOptions: texts.languate\r\n    }\r\n};\r\n\r\nexport default connect<ProjectStateProps>(\r\n    mapStateToProps,\r\n)(Project);"]},"metadata":{},"sourceType":"module"}