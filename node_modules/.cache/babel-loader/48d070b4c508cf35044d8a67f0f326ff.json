{"ast":null,"code":"var _jsxFileName = \"/Users/claudia.crisostomo/Documents/elvisp/lokalise-challenge/romaer-app-2/roamer-app/src/components/project/index.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport Summary from '../summary';\nimport cn from 'classnames';\nimport styles from './project.module.css';\nimport Divider from '../divider';\nimport Card from '../card';\nimport { connect } from 'react-redux';\nimport { isExpanded, projectTexts } from '../../redux/app/selectors';\nimport Button from '../button';\nimport Modal from '../modal';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Project = ({\n  className,\n  isExpanded,\n  addLanguageText,\n  project\n}) => {\n  _s();\n\n  const {\n    translationSections\n  } = project;\n  const isTranslationEmpty = translationSections.length === 0;\n  const [isModalVisible, setModalVisibility] = useState(false);\n\n  const handleOpenModal = () => {\n    setModalVisibility(true);\n  };\n\n  const handleCloseModal = () => {\n    setModalVisibility(false);\n  };\n\n  const handleAddLanguage = () => {\n    console.log('trigger event!!');\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: cn(className, styles.container, {\n      [styles.collapsed]: !isExpanded\n    }),\n    children: [/*#__PURE__*/_jsxDEV(Summary, {\n      project: project\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }, this), isExpanded && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Divider, {\n        className: styles.divider\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.cards,\n        children: [!isTranslationEmpty && translationSections.map(translation => /*#__PURE__*/_jsxDEV(Card, {\n          className: styles.card,\n          translation: translation\n        }, `translation_${translation.id}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 88\n        }, this)), /*#__PURE__*/_jsxDEV(Button, {\n          className: styles.addcard,\n          text: addLanguageText,\n          type: 'secondary',\n          onClick: handleOpenModal\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true), isModalVisible && /*#__PURE__*/_jsxDEV(Modal, {\n      children: /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: 'Hey Claudia'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          className: styles.addcard,\n          text: addLanguageText,\n          type: 'secondary',\n          onClick: handleCloseModal\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          className: styles.addcard,\n          text: addLanguageText,\n          type: 'primary',\n          onClick: handleAddLanguage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Project, \"pLpXbOPPrVC62zaTa9DOZcboVL4=\");\n\n_c = Project;\n\nconst mapStateToProps = state => {\n  const texts = projectTexts(state);\n  return {\n    addLanguageText: texts.addLanguageText,\n    isExpanded: isExpanded(state),\n    closeButtonText: texts.closeButton,\n    addButtonText: texts.addButton\n  };\n};\n\nexport default connect(mapStateToProps)(Project);\n\nvar _c;\n\n$RefreshReg$(_c, \"Project\");","map":{"version":3,"sources":["/Users/claudia.crisostomo/Documents/elvisp/lokalise-challenge/romaer-app-2/roamer-app/src/components/project/index.tsx"],"names":["React","useState","Summary","cn","styles","Divider","Card","connect","isExpanded","projectTexts","Button","Modal","Project","className","addLanguageText","project","translationSections","isTranslationEmpty","length","isModalVisible","setModalVisibility","handleOpenModal","handleCloseModal","handleAddLanguage","console","log","container","collapsed","divider","cards","map","translation","card","id","addcard","mapStateToProps","state","texts","closeButtonText","closeButton","addButtonText","addButton"],"mappings":"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","sourcesContent":["import React, { FC, useState } from 'react';\r\nimport { ProjectState } from '../../redux/appState';\r\nimport Summary from '../summary';\r\nimport cn from 'classnames';\r\nimport styles from './project.module.css';\r\nimport Divider from '../divider';\r\nimport Card from '../card';\r\nimport { RootState } from '../../redux/reducers';\r\nimport { connect } from 'react-redux';\r\nimport { isExpanded, projectTexts } from '../../redux/app/selectors';\r\nimport Button from '../button';\r\nimport Modal from '../modal';\r\n\r\nexport interface ProjectOwnProps {\r\n    className: string;\r\n    project: ProjectState;\r\n}\r\n\r\nexport interface ProjectStateProps {\r\n    isExpanded: boolean;\r\n    addLanguageText: string;\r\n    closeButtonText: string;\r\n    addButtonText: string;\r\n}\r\n\r\nexport interface ProjectDispatchProps {\r\n}\r\n\r\nexport type ProjectProps = ProjectOwnProps & ProjectStateProps & ProjectDispatchProps;\r\n\r\nconst Project: FC<ProjectProps> = ({ className, isExpanded, addLanguageText, project }) => {\r\n    const { translationSections } = project;\r\n    const isTranslationEmpty = translationSections.length === 0;\r\n    const [isModalVisible, setModalVisibility] = useState(false);\r\n\r\n    const handleOpenModal = (): void => {\r\n        setModalVisibility(true);\r\n    };\r\n    const handleCloseModal = (): void => {\r\n        setModalVisibility(false);\r\n    };\r\n    const handleAddLanguage = (): void => {\r\n        console.log('trigger event!!');\r\n    };\r\n\r\n    return (\r\n        <div className={cn(className, styles.container, {\r\n            [styles.collapsed]: !isExpanded\r\n        })}>\r\n            <Summary project={project} />\r\n            {isExpanded && (\r\n                <>\r\n                    <Divider className={styles.divider} />\r\n                    <div className={styles.cards}>\r\n                        {!isTranslationEmpty && translationSections.map(translation => <Card key={`translation_${translation.id}`} className={styles.card} translation={translation} />)}\r\n                        <Button className={styles.addcard} text={addLanguageText} type={'secondary'} onClick={handleOpenModal} />\r\n                    </div>\r\n                </>)\r\n            }\r\n            {isModalVisible && (\r\n                <Modal>\r\n                    <>\r\n                        <p>{'Hey Claudia'}</p>\r\n                        <Button className={styles.addcard} text={addLanguageText} type={'secondary'} onClick={handleCloseModal} />\r\n                        <Button className={styles.addcard} text={addLanguageText} type={'primary'} onClick={handleAddLanguage} />\r\n                    </>\r\n                </Modal>\r\n            )}\r\n        </div >\r\n    );\r\n};\r\n\r\n\r\nconst mapStateToProps = (state: RootState): ProjectStateProps => {\r\n    const texts = projectTexts(state);\r\n    return {\r\n        addLanguageText: texts.addLanguageText,\r\n        isExpanded: isExpanded(state),\r\n        closeButtonText: texts.closeButton,\r\n        addButtonText: texts.addButton,\r\n    }\r\n};\r\n\r\nexport default connect<ProjectStateProps>(\r\n    mapStateToProps,\r\n)(Project);"]},"metadata":{},"sourceType":"module"}