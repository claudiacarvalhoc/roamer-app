{"ast":null,"code":"import { applyMiddleware, compose, createStore } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport { rootReducer } from './reducers';\nimport thunk from 'redux-thunk';\nimport { loadState, saveState } from './localStorage';\nexport const configureStore = initialState => {\n  var _loadState;\n\n  const logger = createLogger();\n  const composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n  const middleware = [thunk, logger];\n  const preloadedState = (_loadState = loadState()) !== null && _loadState !== void 0 ? _loadState : initialState;\n  const store = createStore(rootReducer, {\n    app: preloadedState\n  }, composeEnhancers(applyMiddleware(...middleware)));\n  store.subscribe(() => {\n    saveState(store.getState().app);\n  });\n  return store;\n};\nexport default configureStore;","map":{"version":3,"sources":["/Users/claudia.crisostomo/Documents/elvisp/lokalise-challenge/romaer-app-2/roamer-app/src/redux/store.ts"],"names":["applyMiddleware","compose","createStore","createLogger","rootReducer","thunk","loadState","saveState","configureStore","initialState","logger","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","middleware","preloadedState","store","app","subscribe","getState"],"mappings":"AAGA,SAASA,eAAT,EAA0BC,OAA1B,EAAmCC,WAAnC,QAAsD,OAAtD;AACA,SAASC,YAAT,QAA6B,cAA7B;AACA,SAASC,WAAT,QAAuC,YAAvC;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,SAASC,SAAT,EAAoBC,SAApB,QAAqC,gBAArC;AAOA,OAAO,MAAMC,cAAc,GAAIC,YAAD,IAA4B;AAAA;;AACtD,QAAMC,MAAM,GAAGP,YAAY,EAA3B;AACA,QAAMQ,gBAAgB,GAAIC,MAAD,CAAgBC,oCAAhB,IAAwDZ,OAAjF;AACA,QAAMa,UAAU,GAAG,CAACT,KAAD,EAAQK,MAAR,CAAnB;AAEA,QAAMK,cAAc,iBAAGT,SAAS,EAAZ,mDAAkBG,YAAtC;AACA,QAAMO,KAAK,GAAGd,WAAW,CACrBE,WADqB,EAErB;AACIa,IAAAA,GAAG,EAAEF;AADT,GAFqB,EAKrBJ,gBAAgB,CAACX,eAAe,CAAC,GAAGc,UAAJ,CAAhB,CALK,CAAzB;AAQAE,EAAAA,KAAK,CAACE,SAAN,CAAgB,MAAM;AAClBX,IAAAA,SAAS,CAACS,KAAK,CAACG,QAAN,GAAiBF,GAAlB,CAAT;AACH,GAFD;AAKA,SAAOD,KAAP;AACH,CApBM;AAsBP,eAAeR,cAAf","sourcesContent":["import { AnyAction } from 'redux';\r\nimport { AppState } from './appState';\r\nimport { ThunkAction, ThunkDispatch } from 'redux-thunk';\r\nimport { applyMiddleware, compose, createStore } from 'redux';\r\nimport { createLogger } from 'redux-logger';\r\nimport { rootReducer, RootState } from './reducers';\r\nimport thunk from 'redux-thunk';\r\nimport { loadState, saveState } from './localStorage';\r\nimport { Action } from '@reduxjs/toolkit';\r\n\r\nexport type AppThunk<R> = ThunkAction<R, AppState, unknown, AnyAction>;\r\nexport type AppDispatch = ThunkDispatch<AppState, unknown, AnyAction>;\r\n\r\n\r\nexport const configureStore = (initialState: AppState) => {\r\n    const logger = createLogger();\r\n    const composeEnhancers = (window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n    const middleware = [thunk, logger];\r\n\r\n    const preloadedState = loadState() ?? initialState;\r\n    const store = createStore(\r\n        rootReducer,\r\n        {\r\n            app: preloadedState,\r\n        },\r\n        composeEnhancers(applyMiddleware(...middleware)),\r\n    );\r\n\r\n    store.subscribe(() => {\r\n        saveState(store.getState().app);\r\n    });\r\n\r\n\r\n    return store;\r\n};\r\n\r\nexport default configureStore;\r\n"]},"metadata":{},"sourceType":"module"}