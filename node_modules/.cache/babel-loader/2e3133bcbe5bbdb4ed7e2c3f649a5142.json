{"ast":null,"code":"var _jsxFileName = \"/Users/claudia.crisostomo/Documents/elvisp/lokalise-challenge/romaer-app-2/roamer-app/src/components/card/index.tsx\";\nimport React from 'react';\nimport cn from 'classnames';\nimport styles from './card.module.css';\nimport { projectTexts } from '../../redux/app/selectors';\nimport { connect } from 'react-redux';\nimport Language from '../language';\nimport ProgressBar from '../progressbar';\nimport Label from '../label';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Card = ({\n  className,\n  translation,\n  texts\n}) => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: cn(className, styles.container),\n    children: [/*#__PURE__*/_jsxDEV(Language, {\n      name: translation.language,\n      flag: translation.country\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(ProgressBar, {\n      className: styles.progressBar,\n      percentage: translation.done,\n      size: 'medium'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.labels,\n      children: [/*#__PURE__*/_jsxDEV(Label, {\n        name: texts.doneText,\n        value: `${translation.done}%`,\n        highlighted: false\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Label, {\n        name: texts.wordsToDoText,\n        value: `${translation.wordsToDo}`,\n        highlighted: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Label, {\n        name: texts.unverifiedText,\n        value: `${translation.unverified}`,\n        highlighted: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 13\n  }, this);\n};\n\n_c = Card;\n\nconst mapStateToProps = state => ({\n  texts: projectTexts(state)\n});\n\nexport default connect(mapStateToProps)(Card);\n\nvar _c;\n\n$RefreshReg$(_c, \"Card\");","map":{"version":3,"sources":["/Users/claudia.crisostomo/Documents/elvisp/lokalise-challenge/romaer-app-2/roamer-app/src/components/card/index.tsx"],"names":["React","cn","styles","projectTexts","connect","Language","ProgressBar","Label","Card","className","translation","texts","container","language","country","progressBar","done","labels","doneText","wordsToDoText","wordsToDo","unverifiedText","unverified","mapStateToProps","state"],"mappings":";AAAA,OAAOA,KAAP,MAA0B,OAA1B;AACA,OAAOC,EAAP,MAAe,YAAf;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,SAASC,YAAT,QAA6B,2BAA7B;AAGA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,QAAP,MAAqB,aAArB;AACA,OAAOC,WAAP,MAAwB,gBAAxB;AACA,OAAOC,KAAP,MAAkB,UAAlB;;;AAcA,MAAMC,IAAmB,GAAG,CAAC;AAAEC,EAAAA,SAAF;AAAaC,EAAAA,WAAb;AAA0BC,EAAAA;AAA1B,CAAD,KAAuC;AAE/D,sBAAQ;AAAK,IAAA,SAAS,EAAEV,EAAE,CAACQ,SAAD,EAAYP,MAAM,CAACU,SAAnB,CAAlB;AAAA,4BACJ,QAAC,QAAD;AAAU,MAAA,IAAI,EAAEF,WAAW,CAACG,QAA5B;AAAsC,MAAA,IAAI,EAAEH,WAAW,CAACI;AAAxD;AAAA;AAAA;AAAA;AAAA,YADI,eAEJ,QAAC,WAAD;AAAa,MAAA,SAAS,EAAEZ,MAAM,CAACa,WAA/B;AAA4C,MAAA,UAAU,EAAEL,WAAW,CAACM,IAApE;AAA0E,MAAA,IAAI,EAAE;AAAhF;AAAA;AAAA;AAAA;AAAA,YAFI,eAGJ;AAAK,MAAA,SAAS,EAAEd,MAAM,CAACe,MAAvB;AAAA,8BACI,QAAC,KAAD;AAAO,QAAA,IAAI,EAAEN,KAAK,CAACO,QAAnB;AAA6B,QAAA,KAAK,EAAG,GAAER,WAAW,CAACM,IAAK,GAAxD;AAA4D,QAAA,WAAW,EAAE;AAAzE;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI,QAAC,KAAD;AAAO,QAAA,IAAI,EAAEL,KAAK,CAACQ,aAAnB;AAAkC,QAAA,KAAK,EAAG,GAAET,WAAW,CAACU,SAAU,EAAlE;AAAqE,QAAA,WAAW,EAAE;AAAlF;AAAA;AAAA;AAAA;AAAA,cAFJ,eAGI,QAAC,KAAD;AAAO,QAAA,IAAI,EAAET,KAAK,CAACU,cAAnB;AAAmC,QAAA,KAAK,EAAG,GAAEX,WAAW,CAACY,UAAW,EAApE;AAAuE,QAAA,WAAW,EAAE;AAApF;AAAA;AAAA;AAAA;AAAA,cAHJ;AAAA;AAAA;AAAA;AAAA;AAAA,YAHI;AAAA;AAAA;AAAA;AAAA;AAAA,UAAR;AASH,CAXD;;KAAMd,I;;AAaN,MAAMe,eAAe,GAAIC,KAAD,KAAuC;AAC3Db,EAAAA,KAAK,EAAER,YAAY,CAACqB,KAAD;AADwC,CAAvC,CAAxB;;AAIA,eAAepB,OAAO,CAClBmB,eADkB,CAAP,CAEbf,IAFa,CAAf","sourcesContent":["import React, { FC } from 'react';\nimport cn from 'classnames';\nimport styles from './card.module.css';\nimport { projectTexts } from '../../redux/app/selectors';\nimport { ProjectState, ProjectTextsState, TranslationState } from '../../redux/appState';\nimport { RootState } from '../../redux/reducers';\nimport { connect } from 'react-redux';\nimport Language from '../language';\nimport ProgressBar from '../progressbar';\nimport Label from '../label';\nimport { SpawnSyncOptionsWithStringEncoding } from 'child_process';\n\nexport interface CardOwnProps {\n    className: string;\n    translation: TranslationState;\n}\n\nexport interface CardStateProps {\n    texts: ProjectTextsState;\n}\n\nexport type CardProps = CardOwnProps & CardStateProps;\n\nconst Card: FC<CardProps> = ({ className, translation, texts }) => {\n\n    return (<div className={cn(className, styles.container)}>\n        <Language name={translation.language} flag={translation.country} />\n        <ProgressBar className={styles.progressBar} percentage={translation.done} size={'medium'} />\n        <div className={styles.labels}>\n            <Label name={texts.doneText} value={`${translation.done}%`} highlighted={false} />\n            <Label name={texts.wordsToDoText} value={`${translation.wordsToDo}`} highlighted={true} />\n            <Label name={texts.unverifiedText} value={`${translation.unverified}`} highlighted={true} />\n        </div>\n    </div>);\n};\n\nconst mapStateToProps = (state: RootState): CardStateProps => ({\n    texts: projectTexts(state),\n});\n\nexport default connect<CardStateProps>(\n    mapStateToProps,\n)(Card);"]},"metadata":{},"sourceType":"module"}