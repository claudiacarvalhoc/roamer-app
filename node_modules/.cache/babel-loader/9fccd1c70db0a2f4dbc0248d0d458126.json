{"ast":null,"code":"import React from'react';import styles from'./summary.module.css';import{projectTexts}from'../../redux/app/selectors';import{connect}from'react-redux';import ProgressBar from'../progressbar';import Label from'../label';import Icons from'../icons';import Badge from'../badge';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var Summary=function Summary(_ref){var project=_ref.project,texts=_ref.texts;var hasBadges=project.badges.length>0;return/*#__PURE__*/_jsxs(\"div\",{className:styles.container,children:[/*#__PURE__*/_jsx(\"h1\",{className:styles.summaryTitle,children:project.name}),/*#__PURE__*/_jsx(ProgressBar,{className:styles.progressBar,percentage:project.done}),/*#__PURE__*/_jsxs(\"div\",{className:styles.line,children:[/*#__PURE__*/_jsx(Label,{name:texts.doneText,value:\"\".concat(project.done,\"%\"),highlighted:false}),/*#__PURE__*/_jsx(Label,{name:texts.baseWordsText,value:\"\".concat(project.baseWords),highlighted:false})]}),/*#__PURE__*/_jsxs(\"div\",{className:styles.line,children:[/*#__PURE__*/_jsx(Label,{name:texts.teamText,value:\"\".concat(project.team),highlighted:true}),/*#__PURE__*/_jsx(Label,{name:texts.keysText,value:\"\".concat(project.keys),highlighted:false})]}),/*#__PURE__*/_jsx(\"div\",{className:styles.line,children:/*#__PURE__*/_jsx(Label,{name:texts.qaIssuesText,value:\"\".concat(project.issues),highlighted:true})}),/*#__PURE__*/_jsx(\"div\",{className:styles.iconsLines,children:/*#__PURE__*/_jsx(Icons,{className:styles.icons,types:project.icons})}),/*#__PURE__*/_jsx(\"div\",{className:styles.badgesLine,children:hasBadges&&project.badges.map(function(badge){return/*#__PURE__*/_jsx(Badge,{className:styles.badge,name:badge.name,type:badge.type},\"badge-\".concat(badge.name));})})]});};var mapStateToProps=function mapStateToProps(state){return{texts:projectTexts(state)};};export default connect(mapStateToProps)(Summary);","map":{"version":3,"sources":["/Users/claudia.crisostomo/Documents/elvisp/lokalise-challenge/romaer-app-2/roamer-app/src/components/summary/index.tsx"],"names":["React","styles","projectTexts","connect","ProgressBar","Label","Icons","Badge","Summary","project","texts","hasBadges","badges","length","container","summaryTitle","name","progressBar","done","line","doneText","baseWordsText","baseWords","teamText","team","keysText","keys","qaIssuesText","issues","iconsLines","icons","badgesLine","map","badge","type","mapStateToProps","state"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,KAA0B,OAA1B,CAGA,MAAOC,CAAAA,MAAP,KAAmB,sBAAnB,CACA,OAASC,YAAT,KAA6B,2BAA7B,CACA,OAASC,OAAT,KAAwB,aAAxB,CACA,MAAOC,CAAAA,WAAP,KAAwB,gBAAxB,CACA,MAAOC,CAAAA,KAAP,KAAkB,UAAlB,CACA,MAAOC,CAAAA,KAAP,KAAkB,UAAlB,CACA,MAAOC,CAAAA,KAAP,KAAkB,UAAlB,C,wFAYA,GAAMC,CAAAA,OAAyB,CAAG,QAA5BA,CAAAA,OAA4B,MAAwB,IAArBC,CAAAA,OAAqB,MAArBA,OAAqB,CAAZC,KAAY,MAAZA,KAAY,CACtD,GAAMC,CAAAA,SAAS,CAAGF,OAAO,CAACG,MAAR,CAAeC,MAAf,CAAwB,CAA1C,CACA,mBACI,aAAK,SAAS,CAAEZ,MAAM,CAACa,SAAvB,wBACI,WAAI,SAAS,CAAEb,MAAM,CAACc,YAAtB,UAAqCN,OAAO,CAACO,IAA7C,EADJ,cAEI,KAAC,WAAD,EAAa,SAAS,CAAEf,MAAM,CAACgB,WAA/B,CAA4C,UAAU,CAAER,OAAO,CAACS,IAAhE,EAFJ,cAGI,aAAK,SAAS,CAAEjB,MAAM,CAACkB,IAAvB,wBACI,KAAC,KAAD,EAAO,IAAI,CAAET,KAAK,CAACU,QAAnB,CAA6B,KAAK,WAAKX,OAAO,CAACS,IAAb,KAAlC,CAAwD,WAAW,CAAE,KAArE,EADJ,cAEI,KAAC,KAAD,EAAO,IAAI,CAAER,KAAK,CAACW,aAAnB,CAAkC,KAAK,WAAKZ,OAAO,CAACa,SAAb,CAAvC,CAAiE,WAAW,CAAE,KAA9E,EAFJ,GAHJ,cAOI,aAAK,SAAS,CAAErB,MAAM,CAACkB,IAAvB,wBACI,KAAC,KAAD,EAAO,IAAI,CAAET,KAAK,CAACa,QAAnB,CAA6B,KAAK,WAAKd,OAAO,CAACe,IAAb,CAAlC,CAAuD,WAAW,CAAE,IAApE,EADJ,cAEI,KAAC,KAAD,EAAO,IAAI,CAAEd,KAAK,CAACe,QAAnB,CAA6B,KAAK,WAAKhB,OAAO,CAACiB,IAAb,CAAlC,CAAuD,WAAW,CAAE,KAApE,EAFJ,GAPJ,cAWI,YAAK,SAAS,CAAEzB,MAAM,CAACkB,IAAvB,uBACI,KAAC,KAAD,EAAO,IAAI,CAAET,KAAK,CAACiB,YAAnB,CAAiC,KAAK,WAAKlB,OAAO,CAACmB,MAAb,CAAtC,CAA6D,WAAW,CAAE,IAA1E,EADJ,EAXJ,cAcI,YAAK,SAAS,CAAE3B,MAAM,CAAC4B,UAAvB,uBACI,KAAC,KAAD,EAAO,SAAS,CAAE5B,MAAM,CAAC6B,KAAzB,CAAgC,KAAK,CAAErB,OAAO,CAACqB,KAA/C,EADJ,EAdJ,cAiBI,YAAK,SAAS,CAAE7B,MAAM,CAAC8B,UAAvB,UACKpB,SAAS,EAAIF,OAAO,CAACG,MAAR,CAAeoB,GAAf,CAAmB,SAAAC,KAAK,qBAAI,KAAC,KAAD,EAAmC,SAAS,CAAEhC,MAAM,CAACgC,KAArD,CAA4D,IAAI,CAAEA,KAAK,CAACjB,IAAxE,CAA8E,IAAI,CAAEiB,KAAK,CAACC,IAA1F,kBAAqBD,KAAK,CAACjB,IAA3B,EAAJ,EAAxB,CADlB,EAjBJ,GADJ,CAuBH,CAzBD,CA2BA,GAAMmB,CAAAA,eAAe,CAAG,QAAlBA,CAAAA,eAAkB,CAACC,KAAD,QAA0C,CAC9D1B,KAAK,CAAER,YAAY,CAACkC,KAAD,CAD2C,CAA1C,EAAxB,CAIA,cAAejC,CAAAA,OAAO,CAClBgC,eADkB,CAAP,CAEb3B,OAFa,CAAf","sourcesContent":["import React, { FC } from 'react';\r\nimport { ProjectState, ProjectTextsState } from '../../redux/appState';\r\nimport { RootState } from '../../redux/reducers';\r\nimport styles from './summary.module.css';\r\nimport { projectTexts } from '../../redux/app/selectors';\r\nimport { connect } from 'react-redux';\r\nimport ProgressBar from '../progressbar';\r\nimport Label from '../label';\r\nimport Icons from '../icons';\r\nimport Badge from '../badge';\r\n\r\nexport interface SummaryOwnProps {\r\n    project: ProjectState;\r\n}\r\n\r\nexport interface SummaryStateProps {\r\n    texts: ProjectTextsState;\r\n}\r\n\r\ntype SummaryProps = SummaryOwnProps & SummaryStateProps;\r\n\r\nconst Summary: FC<SummaryProps> = ({ project, texts }) => {\r\n    const hasBadges = project.badges.length > 0;\r\n    return (\r\n        <div className={styles.container}>\r\n            <h1 className={styles.summaryTitle}>{project.name}</h1>\r\n            <ProgressBar className={styles.progressBar} percentage={project.done} />\r\n            <div className={styles.line}>\r\n                <Label name={texts.doneText} value={`${project.done}%`} highlighted={false} />\r\n                <Label name={texts.baseWordsText} value={`${project.baseWords}`} highlighted={false} />\r\n            </div>\r\n            <div className={styles.line}>\r\n                <Label name={texts.teamText} value={`${project.team}`} highlighted={true} />\r\n                <Label name={texts.keysText} value={`${project.keys}`} highlighted={false} />\r\n            </div>\r\n            <div className={styles.line}>\r\n                <Label name={texts.qaIssuesText} value={`${project.issues}`} highlighted={true} />\r\n            </div>\r\n            <div className={styles.iconsLines}>\r\n                <Icons className={styles.icons} types={project.icons} />\r\n            </div>\r\n            <div className={styles.badgesLine}>\r\n                {hasBadges && project.badges.map(badge => <Badge key={`badge-${badge.name}`} className={styles.badge} name={badge.name} type={badge.type} />)}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state: RootState): SummaryStateProps => ({\r\n    texts: projectTexts(state),\r\n});\r\n\r\nexport default connect<SummaryStateProps>(\r\n    mapStateToProps,\r\n)(Summary);\r\n"]},"metadata":{},"sourceType":"module"}