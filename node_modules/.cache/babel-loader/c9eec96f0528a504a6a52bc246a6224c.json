{"ast":null,"code":"import{applyMiddleware,compose,createStore}from'redux';import{createLogger}from'redux-logger';import{rootReducer}from'./reducers';import thunk from'redux-thunk';import{loadState,saveState}from'./localStorage';export var configureStore=function configureStore(initialState){var _loadState;var logger=createLogger();var composeEnhancers=window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__||compose;var middleware=[thunk,logger];var preloadedState=(_loadState=loadState())!==null&&_loadState!==void 0?_loadState:initialState;var store=createStore(rootReducer,{app:preloadedState},composeEnhancers(applyMiddleware.apply(void 0,middleware)));store.subscribe(function(){saveState(store.getState().app);});return store;};export default configureStore;","map":{"version":3,"sources":["/Users/claudia.crisostomo/Documents/elvisp/lokalise-challenge/romaer-app-2/roamer-app/src/redux/store.ts"],"names":["applyMiddleware","compose","createStore","createLogger","rootReducer","thunk","loadState","saveState","configureStore","initialState","logger","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","middleware","preloadedState","store","app","subscribe","getState"],"mappings":"AAGA,OAASA,eAAT,CAA0BC,OAA1B,CAAmCC,WAAnC,KAAsD,OAAtD,CACA,OAASC,YAAT,KAA6B,cAA7B,CACA,OAASC,WAAT,KAA4B,YAA5B,CACA,MAAOC,CAAAA,KAAP,KAAkB,aAAlB,CACA,OAASC,SAAT,CAAoBC,SAApB,KAAqC,gBAArC,CAMA,MAAO,IAAMC,CAAAA,cAAc,CAAG,QAAjBA,CAAAA,cAAiB,CAACC,YAAD,CAA4B,gBACtD,GAAMC,CAAAA,MAAM,CAAGP,YAAY,EAA3B,CACA,GAAMQ,CAAAA,gBAAgB,CAAIC,MAAD,CAAgBC,oCAAhB,EAAwDZ,OAAjF,CACA,GAAMa,CAAAA,UAAU,CAAG,CAACT,KAAD,CAAQK,MAAR,CAAnB,CAEA,GAAMK,CAAAA,cAAc,aAAGT,SAAS,EAAZ,yCAAkBG,YAAtC,CACA,GAAMO,CAAAA,KAAK,CAAGd,WAAW,CACrBE,WADqB,CAErB,CACIa,GAAG,CAAEF,cADT,CAFqB,CAKrBJ,gBAAgB,CAACX,eAAe,MAAf,QAAmBc,UAAnB,CAAD,CALK,CAAzB,CAQAE,KAAK,CAACE,SAAN,CAAgB,UAAM,CAClBX,SAAS,CAACS,KAAK,CAACG,QAAN,GAAiBF,GAAlB,CAAT,CACH,CAFD,EAIA,MAAOD,CAAAA,KAAP,CACH,CAnBM,CAqBP,cAAeR,CAAAA,cAAf","sourcesContent":["import { AnyAction } from 'redux';\r\nimport { AppState } from './appState';\r\nimport { ThunkAction, ThunkDispatch } from 'redux-thunk';\r\nimport { applyMiddleware, compose, createStore } from 'redux';\r\nimport { createLogger } from 'redux-logger';\r\nimport { rootReducer } from './reducers';\r\nimport thunk from 'redux-thunk';\r\nimport { loadState, saveState } from './localStorage';\r\n\r\nexport type AppThunk<R> = ThunkAction<R, AppState, unknown, AnyAction>;\r\nexport type AppDispatch = ThunkDispatch<AppState, unknown, AnyAction>;\r\n\r\n\r\nexport const configureStore = (initialState: AppState) => {\r\n    const logger = createLogger();\r\n    const composeEnhancers = (window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n    const middleware = [thunk, logger];\r\n\r\n    const preloadedState = loadState() ?? initialState;\r\n    const store = createStore(\r\n        rootReducer,\r\n        {\r\n            app: preloadedState,\r\n        },\r\n        composeEnhancers(applyMiddleware(...middleware)),\r\n    );\r\n\r\n    store.subscribe(() => {\r\n        saveState(store.getState().app);\r\n    });\r\n\r\n    return store;\r\n};\r\n\r\nexport default configureStore;\r\n"]},"metadata":{},"sourceType":"module"}