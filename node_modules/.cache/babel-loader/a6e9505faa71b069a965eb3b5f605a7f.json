{"ast":null,"code":"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { initialSetup, fetchProjects } from '../api';\nconst initialState = {\n  expand: false,\n  status: 'idle'\n};\nexport const appSetupAsync = createAsyncThunk('app/setup', async () => {\n  console.log('appSLice > appSetupAsync');\n  await initialSetup();\n  console.log('appSetupAsync > done');\n});\nexport const getProjectsAsync = createAsyncThunk('app/fetchProjects', async () => {\n  console.log('appSLice > getProjectsAsync');\n  return await fetchProjects();\n});\nexport const appSlice = createSlice({\n  name: 'app',\n  initialState,\n  reducers: {\n    expand: state => {\n      state.expand = true;\n    },\n    collapse: state => {\n      state.expand = false;\n    }\n  } // The `extraReducers` field lets the slice handle actions defined elsewhere,\n  // including actions generated by createAsyncThunk or in other slices.\n  // extraReducers: (builder) => {\n  //     builder\n  //         .addCase(incrementAsync.pending, (state) => {\n  //             state.status = 'loading';\n  //         })\n  //         .addCase(incrementAsync.fulfilled, (state, action) => {\n  //             state.status = 'idle';\n  //             state.value += action.payload;\n  //         });\n  // },\n\n});\nexport const {\n  expand,\n  collapse\n} = appSlice.actions;\nexport const selectExpand = state => state.app.expand;\nexport default appSlice.reducer;","map":{"version":3,"sources":["/Users/claudia.crisostomo/Documents/elvisp/lokalise-challenge/romaer-app-2/roamer-app/src/slice/appSlice.ts"],"names":["createAsyncThunk","createSlice","initialSetup","fetchProjects","initialState","expand","status","appSetupAsync","console","log","getProjectsAsync","appSlice","name","reducers","state","collapse","actions","selectExpand","app","reducer"],"mappings":"AAAA,SAASA,gBAAT,EAA2BC,WAA3B,QAA6D,kBAA7D;AAEA,SAASC,YAAT,EAAuBC,aAAvB,QAA4C,QAA5C;AAOA,MAAMC,YAAsB,GAAG;AAC3BC,EAAAA,MAAM,EAAE,KADmB;AAE3BC,EAAAA,MAAM,EAAE;AAFmB,CAA/B;AAKA,OAAO,MAAMC,aAAa,GAAGP,gBAAgB,CACzC,WADyC,EAEzC,YAAY;AACRQ,EAAAA,OAAO,CAACC,GAAR,CAAY,0BAAZ;AACA,QAAMP,YAAY,EAAlB;AACAM,EAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ;AACH,CANwC,CAAtC;AASP,OAAO,MAAMC,gBAAgB,GAAGV,gBAAgB,CAC5C,mBAD4C,EAE5C,YAAY;AACRQ,EAAAA,OAAO,CAACC,GAAR,CAAY,6BAAZ;AACA,SAAO,MAAMN,aAAa,EAA1B;AACH,CAL2C,CAAzC;AAQP,OAAO,MAAMQ,QAAQ,GAAGV,WAAW,CAAC;AAChCW,EAAAA,IAAI,EAAE,KAD0B;AAEhCR,EAAAA,YAFgC;AAGhCS,EAAAA,QAAQ,EAAE;AACNR,IAAAA,MAAM,EAAGS,KAAD,IAAW;AACfA,MAAAA,KAAK,CAACT,MAAN,GAAe,IAAf;AACH,KAHK;AAINU,IAAAA,QAAQ,EAAGD,KAAD,IAAW;AACjBA,MAAAA,KAAK,CAACT,MAAN,GAAe,KAAf;AACH;AANK,GAHsB,CAWhC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAtBgC,CAAD,CAA5B;AAyBP,OAAO,MAAM;AAAEA,EAAAA,MAAF;AAAUU,EAAAA;AAAV,IAAuBJ,QAAQ,CAACK,OAAtC;AAEP,OAAO,MAAMC,YAAY,GAAIH,KAAD,IAAsBA,KAAK,CAACI,GAAN,CAAUb,MAArD;AAEP,eAAeM,QAAQ,CAACQ,OAAxB","sourcesContent":["import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';\r\nimport { RootState, AppThunk } from '../app/store';\r\nimport { initialSetup, fetchProjects } from '../api';\r\n\r\nexport interface AppState {\r\n    expand: boolean;\r\n    status: 'idle' | 'loading' | 'failed';\r\n}\r\n\r\nconst initialState: AppState = {\r\n    expand: false,\r\n    status: 'idle',\r\n};\r\n\r\nexport const appSetupAsync = createAsyncThunk(\r\n    'app/setup',\r\n    async () => {\r\n        console.log('appSLice > appSetupAsync');\r\n        await initialSetup();\r\n        console.log('appSetupAsync > done');\r\n    }\r\n);\r\n\r\nexport const getProjectsAsync = createAsyncThunk(\r\n    'app/fetchProjects',\r\n    async () => {\r\n        console.log('appSLice > getProjectsAsync');\r\n        return await fetchProjects();\r\n    }\r\n);\r\n\r\nexport const appSlice = createSlice({\r\n    name: 'app',\r\n    initialState,\r\n    reducers: {\r\n        expand: (state) => {\r\n            state.expand = true;\r\n        },\r\n        collapse: (state) => {\r\n            state.expand = false;\r\n        },\r\n    },\r\n    // The `extraReducers` field lets the slice handle actions defined elsewhere,\r\n    // including actions generated by createAsyncThunk or in other slices.\r\n    // extraReducers: (builder) => {\r\n    //     builder\r\n    //         .addCase(incrementAsync.pending, (state) => {\r\n    //             state.status = 'loading';\r\n    //         })\r\n    //         .addCase(incrementAsync.fulfilled, (state, action) => {\r\n    //             state.status = 'idle';\r\n    //             state.value += action.payload;\r\n    //         });\r\n    // },\r\n});\r\n\r\nexport const { expand, collapse } = appSlice.actions;\r\n\r\nexport const selectExpand = (state: RootState) => state.app.expand;\r\n\r\nexport default appSlice.reducer;\r\n"]},"metadata":{},"sourceType":"module"}