import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import { RootState, AppThunk } from '../app/store';
import { initialSetup, fetchProjects } from '../api';
import { ProjectProperties } from './projectSlice';

export interface AppState {
    expand: boolean;
    status: 'idle' | 'loading' | 'failed';
}

const initialState: AppState = {
    expand: false,
    status: 'idle',
};

export const getProjectsAsync = createAsyncThunk(
    'app/fetchProjects',
    async () => {
        return new Promise<ProjectProperties[]>((resolve) => {
            console.log('appSLice > getProjectsAsync > initialSetup');
            initialSetup();
            console.log('appSLice > getProjectsAsync > fetchProjects');
            resolve(fetchProjects());
        });
    }
);

export const appSlice = createSlice({
    name: 'app',
    initialState,
    reducers: {
        expand: (state) => {
            state.expand = true;
        },
        collapse: (state) => {
            state.expand = false;
        },
    },
    // The `extraReducers` field lets the slice handle actions defined elsewhere,
    // including actions generated by createAsyncThunk or in other slices.
    extraReducers: (builder) => {
        builder
            .addCase(getProjectsAsync.pending, (state) => {
                console.log('getProjectsAsync > pending');
            })
            .addCase(getProjectsAsync.fulfilled, (state, action) => {
                console.log('getProjectsAsync > fulfilled');
            })
            .addCase(getProjectsAsync.rejected, (state, action) => {
                console.log('getProjectsAsync > rejected');
            })
    },
});

export const { expand, collapse } = appSlice.actions;

export const selectExpand = (state: RootState) => state.app.expand;

export default appSlice.reducer;
