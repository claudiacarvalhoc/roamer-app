import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import { RootState, AppThunk } from './app/store';


export interface AppState {
    title: string;
    expand: boolean;
    status: 'idle' | 'loading' | 'failed';
}

const initialState: AppState = {
    title: 'Roamer App',
    expand: false,
    status: 'idle',
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const incrementAsync = createAsyncThunk(
    'app/fetchProjects',
    async (amount: number) => {
        // const response = await fetchCount(amount);
        // The value we return becomes the `fulfilled` action payload
        // return response.data;
        return {};
    }
);

export const appSlice = createSlice({
    name: 'counter',
    initialState,
    reducers: {
        expand: (state) => {
            state.expand = true;
        },
        collapse: (state) => {
            state.expand = false;
        },
    },
    // The `extraReducers` field lets the slice handle actions defined elsewhere,
    // including actions generated by createAsyncThunk or in other slices.
    // extraReducers: (builder) => {
    //     builder
    //         .addCase(incrementAsync.pending, (state) => {
    //             state.status = 'loading';
    //         })
    //         .addCase(incrementAsync.fulfilled, (state, action) => {
    //             state.status = 'idle';
    //             state.value += action.payload;
    //         });
    // },
});

export const { expand, collapse } = appSlice.actions;

export const selectExpand = (state: RootState) => state.app.expand;
export const selectAppTitle = (state: RootState) => state.app.title;

export default appSlice.reducer;
